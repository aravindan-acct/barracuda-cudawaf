=begin
#exception profiling API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for SwaggerClient::ExceptionProfilingBody
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ExceptionProfilingBody' do
  before do
    # run before each test
    @instance = SwaggerClient::ExceptionProfilingBody.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ExceptionProfilingBody' do
    it 'should create an instance of ExceptionProfilingBody' do
      expect(@instance).to be_instance_of(SwaggerClient::ExceptionProfilingBody)
    end
  end
  describe 'test attribute "exception_profiling_learn_from_trusted_host"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["No", "Yes"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.exception_profiling_learn_from_trusted_host = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "exception_profiling_level"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["None", "Low", "Medium", "High"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.exception_profiling_level = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "exception_profiling_trusted_host_group"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end

