=begin
#advanced configuration API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for SwaggerClient::AdvancedConfigurationBody
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AdvancedConfigurationBody' do
  before do
    # run before each test
    @instance = SwaggerClient::AdvancedConfigurationBody.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AdvancedConfigurationBody' do
    it 'should create an instance of AdvancedConfigurationBody' do
      expect(@instance).to be_instance_of(SwaggerClient::AdvancedConfigurationBody)
    end
  end
  describe 'test attribute "enable_vdi"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Yes", "No"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.enable_vdi = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "enable_web_application_firewall"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Yes", "No"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.enable_web_application_firewall = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "enable_websocket"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Yes", "No"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.enable_websocket = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "keepalive_requests"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "accept_list_status"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Yes", "No"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.accept_list_status = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "ntlm_ignore_extra_data"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Yes", "No"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.ntlm_ignore_extra_data = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "enable_http2"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Yes", "No"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.enable_http2 = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "enable_proxy_protocol"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Yes", "No"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.enable_proxy_protocol = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "proxy_list_status"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Yes", "No"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.proxy_list_status = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "accept_list"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "proxy_list"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end

