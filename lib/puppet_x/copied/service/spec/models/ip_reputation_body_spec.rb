=begin
#ip reputation API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for SwaggerClient::IpReputationBody
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'IpReputationBody' do
  before do
    # run before each test
    @instance = SwaggerClient::IpReputationBody.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of IpReputationBody' do
    it 'should create an instance of IpReputationBody' do
      expect(@instance).to be_instance_of(SwaggerClient::IpReputationBody)
    end
  end
  describe 'test attribute "tor_nodes"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Block", "Allow"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.tor_nodes = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "geoip_enable_logging"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Yes", "No"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.geoip_enable_logging = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "satellite_provider"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Block", "Allow"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.satellite_provider = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "geoip_action"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Block", "Allow"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.geoip_action = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "apply_policy_at"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Network Layer", "Application Layer"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.apply_policy_at = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "anonymous_proxy"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Block", "Allow"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.anonymous_proxy = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "enable_ip_reputation_filter"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["On", "Off"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.enable_ip_reputation_filter = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "geo_pool"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "barracuda_reputation_blocklist"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Block", "Allow"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.barracuda_reputation_blocklist = value }.not_to raise_error
       #end
    end
  end

end

