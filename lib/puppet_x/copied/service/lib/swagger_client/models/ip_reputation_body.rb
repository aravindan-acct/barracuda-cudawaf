=begin
#ip reputation API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class IpReputationBody
    # TOR Nodes
    attr_accessor :tor_nodes

    # Enable Logging
    attr_accessor :geoip_enable_logging

    # Satellite Provider
    attr_accessor :satellite_provider

    # Action
    attr_accessor :geoip_action

    # Apply Policy at
    attr_accessor :apply_policy_at

    # Anonymous Proxy
    attr_accessor :anonymous_proxy

    # Enable IP Reputation Filter
    attr_accessor :enable_ip_reputation_filter

    # Geo Pool
    attr_accessor :geo_pool

    # Barracuda Reputation Blocklist
    attr_accessor :barracuda_reputation_blocklist

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tor_nodes' => :'tor-nodes',
        :'geoip_enable_logging' => :'geoip-enable-logging',
        :'satellite_provider' => :'satellite-provider',
        :'geoip_action' => :'geoip-action',
        :'apply_policy_at' => :'apply-policy-at',
        :'anonymous_proxy' => :'anonymous-proxy',
        :'enable_ip_reputation_filter' => :'enable-ip-reputation-filter',
        :'geo_pool' => :'geo-pool',
        :'barracuda_reputation_blocklist' => :'barracuda-reputation-blocklist'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'tor_nodes' => :'String',
        :'geoip_enable_logging' => :'String',
        :'satellite_provider' => :'String',
        :'geoip_action' => :'String',
        :'apply_policy_at' => :'String',
        :'anonymous_proxy' => :'String',
        :'enable_ip_reputation_filter' => :'String',
        :'geo_pool' => :'String',
        :'barracuda_reputation_blocklist' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'tor-nodes')
        self.tor_nodes = attributes[:'tor-nodes']
      else
        self.tor_nodes = "Allow"
      end

      if attributes.has_key?(:'geoip-enable-logging')
        self.geoip_enable_logging = attributes[:'geoip-enable-logging']
      else
        self.geoip_enable_logging = "No"
      end

      if attributes.has_key?(:'satellite-provider')
        self.satellite_provider = attributes[:'satellite-provider']
      else
        self.satellite_provider = "Allow"
      end

      if attributes.has_key?(:'geoip-action')
        self.geoip_action = attributes[:'geoip-action']
      else
        self.geoip_action = "Block"
      end

      if attributes.has_key?(:'apply-policy-at')
        self.apply_policy_at = attributes[:'apply-policy-at']
      else
        self.apply_policy_at = "Network Layer"
      end

      if attributes.has_key?(:'anonymous-proxy')
        self.anonymous_proxy = attributes[:'anonymous-proxy']
      else
        self.anonymous_proxy = "Allow"
      end

      if attributes.has_key?(:'enable-ip-reputation-filter')
        self.enable_ip_reputation_filter = attributes[:'enable-ip-reputation-filter']
      else
        self.enable_ip_reputation_filter = "Off"
      end

      if attributes.has_key?(:'geo-pool')
        self.geo_pool = attributes[:'geo-pool']
      else
        self.geo_pool = ""
      end

      if attributes.has_key?(:'barracuda-reputation-blocklist')
        self.barracuda_reputation_blocklist = attributes[:'barracuda-reputation-blocklist']
      else
        self.barracuda_reputation_blocklist = "Allow"
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      tor_nodes_validator = EnumAttributeValidator.new('String', ["Block", "Allow"])
      return false unless tor_nodes_validator.valid?(@tor_nodes)
      geoip_enable_logging_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless geoip_enable_logging_validator.valid?(@geoip_enable_logging)
      satellite_provider_validator = EnumAttributeValidator.new('String', ["Block", "Allow"])
      return false unless satellite_provider_validator.valid?(@satellite_provider)
      geoip_action_validator = EnumAttributeValidator.new('String', ["Block", "Allow"])
      return false unless geoip_action_validator.valid?(@geoip_action)
      apply_policy_at_validator = EnumAttributeValidator.new('String', ["Network Layer", "Application Layer"])
      return false unless apply_policy_at_validator.valid?(@apply_policy_at)
      anonymous_proxy_validator = EnumAttributeValidator.new('String', ["Block", "Allow"])
      return false unless anonymous_proxy_validator.valid?(@anonymous_proxy)
      enable_ip_reputation_filter_validator = EnumAttributeValidator.new('String', ["On", "Off"])
      return false unless enable_ip_reputation_filter_validator.valid?(@enable_ip_reputation_filter)
      barracuda_reputation_blocklist_validator = EnumAttributeValidator.new('String', ["Block", "Allow"])
      return false unless barracuda_reputation_blocklist_validator.valid?(@barracuda_reputation_blocklist)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tor_nodes Object to be assigned
    def tor_nodes=(tor_nodes)
      validator = EnumAttributeValidator.new('String', ["Block", "Allow"])
      unless validator.valid?(tor_nodes)
        fail ArgumentError, "invalid value for 'tor_nodes', must be one of #{validator.allowable_values}."
      end
      @tor_nodes = tor_nodes
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] geoip_enable_logging Object to be assigned
    def geoip_enable_logging=(geoip_enable_logging)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(geoip_enable_logging)
        fail ArgumentError, "invalid value for 'geoip_enable_logging', must be one of #{validator.allowable_values}."
      end
      @geoip_enable_logging = geoip_enable_logging
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] satellite_provider Object to be assigned
    def satellite_provider=(satellite_provider)
      validator = EnumAttributeValidator.new('String', ["Block", "Allow"])
      unless validator.valid?(satellite_provider)
        fail ArgumentError, "invalid value for 'satellite_provider', must be one of #{validator.allowable_values}."
      end
      @satellite_provider = satellite_provider
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] geoip_action Object to be assigned
    def geoip_action=(geoip_action)
      validator = EnumAttributeValidator.new('String', ["Block", "Allow"])
      unless validator.valid?(geoip_action)
        fail ArgumentError, "invalid value for 'geoip_action', must be one of #{validator.allowable_values}."
      end
      @geoip_action = geoip_action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] apply_policy_at Object to be assigned
    def apply_policy_at=(apply_policy_at)
      validator = EnumAttributeValidator.new('String', ["Network Layer", "Application Layer"])
      unless validator.valid?(apply_policy_at)
        fail ArgumentError, "invalid value for 'apply_policy_at', must be one of #{validator.allowable_values}."
      end
      @apply_policy_at = apply_policy_at
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] anonymous_proxy Object to be assigned
    def anonymous_proxy=(anonymous_proxy)
      validator = EnumAttributeValidator.new('String', ["Block", "Allow"])
      unless validator.valid?(anonymous_proxy)
        fail ArgumentError, "invalid value for 'anonymous_proxy', must be one of #{validator.allowable_values}."
      end
      @anonymous_proxy = anonymous_proxy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_ip_reputation_filter Object to be assigned
    def enable_ip_reputation_filter=(enable_ip_reputation_filter)
      validator = EnumAttributeValidator.new('String', ["On", "Off"])
      unless validator.valid?(enable_ip_reputation_filter)
        fail ArgumentError, "invalid value for 'enable_ip_reputation_filter', must be one of #{validator.allowable_values}."
      end
      @enable_ip_reputation_filter = enable_ip_reputation_filter
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] barracuda_reputation_blocklist Object to be assigned
    def barracuda_reputation_blocklist=(barracuda_reputation_blocklist)
      validator = EnumAttributeValidator.new('String', ["Block", "Allow"])
      unless validator.valid?(barracuda_reputation_blocklist)
        fail ArgumentError, "invalid value for 'barracuda_reputation_blocklist', must be one of #{validator.allowable_values}."
      end
      @barracuda_reputation_blocklist = barracuda_reputation_blocklist
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tor_nodes == o.tor_nodes &&
          geoip_enable_logging == o.geoip_enable_logging &&
          satellite_provider == o.satellite_provider &&
          geoip_action == o.geoip_action &&
          apply_policy_at == o.apply_policy_at &&
          anonymous_proxy == o.anonymous_proxy &&
          enable_ip_reputation_filter == o.enable_ip_reputation_filter &&
          geo_pool == o.geo_pool &&
          barracuda_reputation_blocklist == o.barracuda_reputation_blocklist
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [tor_nodes, geoip_enable_logging, satellite_provider, geoip_action, apply_policy_at, anonymous_proxy, enable_ip_reputation_filter, geo_pool, barracuda_reputation_blocklist].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
