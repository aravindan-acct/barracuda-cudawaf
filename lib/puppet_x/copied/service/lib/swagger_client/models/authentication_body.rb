=begin
#authentication API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class AuthenticationBody
    # Login Page
    attr_accessor :login_page

    # Dual Login Page
    attr_accessor :dual_login_page

    # Organization Name
    attr_accessor :service_provider_org_name

    # Login Failed Page
    attr_accessor :login_failed_page

    # Kerberos SPN
    attr_accessor :kerberos_spn

    # Signing Certificate
    attr_accessor :signing_certificate

    # Login Processor Path
    attr_accessor :login_processor_path

    # Count Window
    attr_accessor :count_window

    # SP Entity ID
    attr_accessor :service_provider_entity_id

    # Send Domain Name to RADIUS/RSA Server
    attr_accessor :send_domain_name

    # Session Cookie Domain
    attr_accessor :cookie_domain

    # Login Successful Page
    attr_accessor :login_successful_page

    # Session Timeout for ActiveSync
    attr_accessor :session_timeout_for_activesync

    # Trusted Hosts Group
    attr_accessor :groups

    # Organization Display Name
    attr_accessor :service_provider_display_name

    # Master Service URL
    attr_accessor :master_service_url

    # Encryption Certificate
    attr_accessor :encryption_certificate

    # Authentication Service
    attr_accessor :authentication_service

    # Logout Successful Page
    attr_accessor :logout_successful_page

    # Logout Page
    attr_accessor :logout_page

    # Challenge User Field
    attr_accessor :challenge_user_field

    # Master Service
    attr_accessor :master_service

    # Access Denied Page
    attr_accessor :access_denied_page

    # Session Cookie Path
    attr_accessor :cookie_path

    # Login Challenge Page
    attr_accessor :login_challenge_page

    # Organization URL
    attr_accessor :service_provider_org_url

    # Idle Timeout
    attr_accessor :idle_timeout

    # Auth Password Expired URL
    attr_accessor :password_expired_url

    # Status
    attr_accessor :status

    # Post Processor Path
    attr_accessor :post_processor_path

    #  Dual Authentication Required
    attr_accessor :dual_authentication

    # SSO Cookie Update Interval
    attr_accessor :sso_cookie_update_interval

    # Challenge Prompt Field
    attr_accessor :challenge_prompt_field

    # Enable Bruteforce Prevention
    attr_accessor :enable_bruteforce_prevention

    # Max Failed Attempts Allowed Per IP
    attr_accessor :max_failed_attempts

    # Creation Timeout
    attr_accessor :creation_timeout

    # Kerberos Delegation
    attr_accessor :kerberos_enable_delegation

    # Secondary Authentication Service
    attr_accessor :secondary_authentication_service

    # Trusted Hosts Action
    attr_accessor :action

    # Enable Debug Logs
    attr_accessor :kerberos_debug_status

    # Logout Processor Path
    attr_accessor :logout_processor_path

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'login_page' => :'login-page',
        :'dual_login_page' => :'dual-login-page',
        :'service_provider_org_name' => :'service-provider-org-name',
        :'login_failed_page' => :'login-failed-page',
        :'kerberos_spn' => :'kerberos-spn',
        :'signing_certificate' => :'signing-certificate',
        :'login_processor_path' => :'login-processor-path',
        :'count_window' => :'count-window',
        :'service_provider_entity_id' => :'service-provider-entity-id',
        :'send_domain_name' => :'send-domain-name',
        :'cookie_domain' => :'cookie-domain',
        :'login_successful_page' => :'login-successful-page',
        :'session_timeout_for_activesync' => :'session-timeout-for-activesync',
        :'groups' => :'groups',
        :'service_provider_display_name' => :'service-provider-display-name',
        :'master_service_url' => :'master-service-url',
        :'encryption_certificate' => :'encryption-certificate',
        :'authentication_service' => :'authentication-service',
        :'logout_successful_page' => :'logout-successful-page',
        :'logout_page' => :'logout-page',
        :'challenge_user_field' => :'challenge-user-field',
        :'master_service' => :'master-service',
        :'access_denied_page' => :'access-denied-page',
        :'cookie_path' => :'cookie-path',
        :'login_challenge_page' => :'login-challenge-page',
        :'service_provider_org_url' => :'service-provider-org-url',
        :'idle_timeout' => :'idle-timeout',
        :'password_expired_url' => :'password-expired-url',
        :'status' => :'status',
        :'post_processor_path' => :'post-processor-path',
        :'dual_authentication' => :'dual-authentication',
        :'sso_cookie_update_interval' => :'sso-cookie-update-interval',
        :'challenge_prompt_field' => :'challenge-prompt-field',
        :'enable_bruteforce_prevention' => :'enable-bruteforce-prevention',
        :'max_failed_attempts' => :'max-failed-attempts',
        :'creation_timeout' => :'creation-timeout',
        :'kerberos_enable_delegation' => :'kerberos-enable-delegation',
        :'secondary_authentication_service' => :'secondary-authentication-service',
        :'action' => :'action',
        :'kerberos_debug_status' => :'kerberos-debug-status',
        :'logout_processor_path' => :'logout-processor-path'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'login_page' => :'String',
        :'dual_login_page' => :'String',
        :'service_provider_org_name' => :'String',
        :'login_failed_page' => :'String',
        :'kerberos_spn' => :'String',
        :'signing_certificate' => :'String',
        :'login_processor_path' => :'String',
        :'count_window' => :'Integer',
        :'service_provider_entity_id' => :'String',
        :'send_domain_name' => :'String',
        :'cookie_domain' => :'String',
        :'login_successful_page' => :'String',
        :'session_timeout_for_activesync' => :'Integer',
        :'groups' => :'String',
        :'service_provider_display_name' => :'String',
        :'master_service_url' => :'String',
        :'encryption_certificate' => :'String',
        :'authentication_service' => :'String',
        :'logout_successful_page' => :'String',
        :'logout_page' => :'String',
        :'challenge_user_field' => :'String',
        :'master_service' => :'String',
        :'access_denied_page' => :'String',
        :'cookie_path' => :'String',
        :'login_challenge_page' => :'String',
        :'service_provider_org_url' => :'String',
        :'idle_timeout' => :'Integer',
        :'password_expired_url' => :'String',
        :'status' => :'String',
        :'post_processor_path' => :'String',
        :'dual_authentication' => :'String',
        :'sso_cookie_update_interval' => :'Integer',
        :'challenge_prompt_field' => :'String',
        :'enable_bruteforce_prevention' => :'String',
        :'max_failed_attempts' => :'Integer',
        :'creation_timeout' => :'Integer',
        :'kerberos_enable_delegation' => :'String',
        :'secondary_authentication_service' => :'String',
        :'action' => :'String',
        :'kerberos_debug_status' => :'String',
        :'logout_processor_path' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'login-page')
        self.login_page = attributes[:'login-page']
      else
        self.login_page = "default-login-page"
      end

      if attributes.has_key?(:'dual-login-page')
        self.dual_login_page = attributes[:'dual-login-page']
      else
        self.dual_login_page = "default-dual-login-page"
      end

      if attributes.has_key?(:'service-provider-org-name')
        self.service_provider_org_name = attributes[:'service-provider-org-name']
      end

      if attributes.has_key?(:'login-failed-page')
        self.login_failed_page = attributes[:'login-failed-page']
      else
        self.login_failed_page = "default-login-failed-page"
      end

      if attributes.has_key?(:'kerberos-spn')
        self.kerberos_spn = attributes[:'kerberos-spn']
      end

      if attributes.has_key?(:'signing-certificate')
        self.signing_certificate = attributes[:'signing-certificate']
      end

      if attributes.has_key?(:'login-processor-path')
        self.login_processor_path = attributes[:'login-processor-path']
      else
        self.login_processor_path = "/nclogin.submit"
      end

      if attributes.has_key?(:'count-window')
        self.count_window = attributes[:'count-window']
      end

      if attributes.has_key?(:'service-provider-entity-id')
        self.service_provider_entity_id = attributes[:'service-provider-entity-id']
      end

      if attributes.has_key?(:'send-domain-name')
        self.send_domain_name = attributes[:'send-domain-name']
      else
        self.send_domain_name = "Block"
      end

      if attributes.has_key?(:'cookie-domain')
        self.cookie_domain = attributes[:'cookie-domain']
      end

      if attributes.has_key?(:'login-successful-page')
        self.login_successful_page = attributes[:'login-successful-page']
      else
        self.login_successful_page = "default-login-success-page"
      end

      if attributes.has_key?(:'session-timeout-for-activesync')
        self.session_timeout_for_activesync = attributes[:'session-timeout-for-activesync']
      end

      if attributes.has_key?(:'groups')
        self.groups = attributes[:'groups']
      end

      if attributes.has_key?(:'service-provider-display-name')
        self.service_provider_display_name = attributes[:'service-provider-display-name']
      end

      if attributes.has_key?(:'master-service-url')
        self.master_service_url = attributes[:'master-service-url']
      end

      if attributes.has_key?(:'encryption-certificate')
        self.encryption_certificate = attributes[:'encryption-certificate']
      end

      if attributes.has_key?(:'authentication-service')
        self.authentication_service = attributes[:'authentication-service']
      end

      if attributes.has_key?(:'logout-successful-page')
        self.logout_successful_page = attributes[:'logout-successful-page']
      else
        self.logout_successful_page = "default-logout-success-page"
      end

      if attributes.has_key?(:'logout-page')
        self.logout_page = attributes[:'logout-page']
      else
        self.logout_page = "default-login-success-page"
      end

      if attributes.has_key?(:'challenge-user-field')
        self.challenge_user_field = attributes[:'challenge-user-field']
      else
        self.challenge_user_field = "challenge_user"
      end

      if attributes.has_key?(:'master-service')
        self.master_service = attributes[:'master-service']
      else
        self.master_service = "No"
      end

      if attributes.has_key?(:'access-denied-page')
        self.access_denied_page = attributes[:'access-denied-page']
      else
        self.access_denied_page = "default-access-denied-page"
      end

      if attributes.has_key?(:'cookie-path')
        self.cookie_path = attributes[:'cookie-path']
      else
        self.cookie_path = "/"
      end

      if attributes.has_key?(:'login-challenge-page')
        self.login_challenge_page = attributes[:'login-challenge-page']
      else
        self.login_challenge_page = "default-challenge-page"
      end

      if attributes.has_key?(:'service-provider-org-url')
        self.service_provider_org_url = attributes[:'service-provider-org-url']
      end

      if attributes.has_key?(:'idle-timeout')
        self.idle_timeout = attributes[:'idle-timeout']
      end

      if attributes.has_key?(:'password-expired-url')
        self.password_expired_url = attributes[:'password-expired-url']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = "Off"
      end

      if attributes.has_key?(:'post-processor-path')
        self.post_processor_path = attributes[:'post-processor-path']
      else
        self.post_processor_path = "/saml.sso/saml2/post"
      end

      if attributes.has_key?(:'dual-authentication')
        self.dual_authentication = attributes[:'dual-authentication']
      else
        self.dual_authentication = "No"
      end

      if attributes.has_key?(:'sso-cookie-update-interval')
        self.sso_cookie_update_interval = attributes[:'sso-cookie-update-interval']
      end

      if attributes.has_key?(:'challenge-prompt-field')
        self.challenge_prompt_field = attributes[:'challenge-prompt-field']
      else
        self.challenge_prompt_field = "challenge_prompt"
      end

      if attributes.has_key?(:'enable-bruteforce-prevention')
        self.enable_bruteforce_prevention = attributes[:'enable-bruteforce-prevention']
      else
        self.enable_bruteforce_prevention = "No"
      end

      if attributes.has_key?(:'max-failed-attempts')
        self.max_failed_attempts = attributes[:'max-failed-attempts']
      end

      if attributes.has_key?(:'creation-timeout')
        self.creation_timeout = attributes[:'creation-timeout']
      end

      if attributes.has_key?(:'kerberos-enable-delegation')
        self.kerberos_enable_delegation = attributes[:'kerberos-enable-delegation']
      else
        self.kerberos_enable_delegation = "Yes"
      end

      if attributes.has_key?(:'secondary-authentication-service')
        self.secondary_authentication_service = attributes[:'secondary-authentication-service']
      end

      if attributes.has_key?(:'action')
        self.action = attributes[:'action']
      else
        self.action = "Default"
      end

      if attributes.has_key?(:'kerberos-debug-status')
        self.kerberos_debug_status = attributes[:'kerberos-debug-status']
      else
        self.kerberos_debug_status = "No"
      end

      if attributes.has_key?(:'logout-processor-path')
        self.logout_processor_path = attributes[:'logout-processor-path']
      else
        self.logout_processor_path = "/saml.sso/slo/redirect"
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@count_window.nil? && @count_window < 1
        invalid_properties.push("invalid value for 'count_window', must be greater than or equal to 1.")
      end

      if !@session_timeout_for_activesync.nil? && @session_timeout_for_activesync < 1
        invalid_properties.push("invalid value for 'session_timeout_for_activesync', must be greater than or equal to 1.")
      end

      if @authentication_service.nil?
        invalid_properties.push("invalid value for 'authentication_service', authentication_service cannot be nil.")
      end

      if !@idle_timeout.nil? && @idle_timeout < 1
        invalid_properties.push("invalid value for 'idle_timeout', must be greater than or equal to 1.")
      end

      if !@sso_cookie_update_interval.nil? && @sso_cookie_update_interval < 1
        invalid_properties.push("invalid value for 'sso_cookie_update_interval', must be greater than or equal to 1.")
      end

      if !@max_failed_attempts.nil? && @max_failed_attempts < 1
        invalid_properties.push("invalid value for 'max_failed_attempts', must be greater than or equal to 1.")
      end

      if !@creation_timeout.nil? && @creation_timeout < 1
        invalid_properties.push("invalid value for 'creation_timeout', must be greater than or equal to 1.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@count_window.nil? && @count_window < 1
      send_domain_name_validator = EnumAttributeValidator.new('String', ["Allow", "Block"])
      return false unless send_domain_name_validator.valid?(@send_domain_name)
      return false if !@session_timeout_for_activesync.nil? && @session_timeout_for_activesync < 1
      return false if @authentication_service.nil?
      master_service_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless master_service_validator.valid?(@master_service)
      return false if !@idle_timeout.nil? && @idle_timeout < 1
      status_validator = EnumAttributeValidator.new('String', ["On", "Off"])
      return false unless status_validator.valid?(@status)
      dual_authentication_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless dual_authentication_validator.valid?(@dual_authentication)
      return false if !@sso_cookie_update_interval.nil? && @sso_cookie_update_interval < 1
      enable_bruteforce_prevention_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_bruteforce_prevention_validator.valid?(@enable_bruteforce_prevention)
      return false if !@max_failed_attempts.nil? && @max_failed_attempts < 1
      return false if !@creation_timeout.nil? && @creation_timeout < 1
      kerberos_enable_delegation_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless kerberos_enable_delegation_validator.valid?(@kerberos_enable_delegation)
      action_validator = EnumAttributeValidator.new('String', ["Allow", "Default"])
      return false unless action_validator.valid?(@action)
      kerberos_debug_status_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless kerberos_debug_status_validator.valid?(@kerberos_debug_status)
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] count_window Value to be assigned
    def count_window=(count_window)

      if !count_window.nil? && count_window < 1
        fail ArgumentError, "invalid value for 'count_window', must be greater than or equal to 1."
      end

      @count_window = count_window
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] send_domain_name Object to be assigned
    def send_domain_name=(send_domain_name)
      validator = EnumAttributeValidator.new('String', ["Allow", "Block"])
      unless validator.valid?(send_domain_name)
        fail ArgumentError, "invalid value for 'send_domain_name', must be one of #{validator.allowable_values}."
      end
      @send_domain_name = send_domain_name
    end

    # Custom attribute writer method with validation
    # @param [Object] session_timeout_for_activesync Value to be assigned
    def session_timeout_for_activesync=(session_timeout_for_activesync)

      if !session_timeout_for_activesync.nil? && session_timeout_for_activesync < 1
        fail ArgumentError, "invalid value for 'session_timeout_for_activesync', must be greater than or equal to 1."
      end

      @session_timeout_for_activesync = session_timeout_for_activesync
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] master_service Object to be assigned
    def master_service=(master_service)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(master_service)
        fail ArgumentError, "invalid value for 'master_service', must be one of #{validator.allowable_values}."
      end
      @master_service = master_service
    end

    # Custom attribute writer method with validation
    # @param [Object] idle_timeout Value to be assigned
    def idle_timeout=(idle_timeout)

      if !idle_timeout.nil? && idle_timeout < 1
        fail ArgumentError, "invalid value for 'idle_timeout', must be greater than or equal to 1."
      end

      @idle_timeout = idle_timeout
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["On", "Off"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for 'status', must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dual_authentication Object to be assigned
    def dual_authentication=(dual_authentication)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(dual_authentication)
        fail ArgumentError, "invalid value for 'dual_authentication', must be one of #{validator.allowable_values}."
      end
      @dual_authentication = dual_authentication
    end

    # Custom attribute writer method with validation
    # @param [Object] sso_cookie_update_interval Value to be assigned
    def sso_cookie_update_interval=(sso_cookie_update_interval)

      if !sso_cookie_update_interval.nil? && sso_cookie_update_interval < 1
        fail ArgumentError, "invalid value for 'sso_cookie_update_interval', must be greater than or equal to 1."
      end

      @sso_cookie_update_interval = sso_cookie_update_interval
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_bruteforce_prevention Object to be assigned
    def enable_bruteforce_prevention=(enable_bruteforce_prevention)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_bruteforce_prevention)
        fail ArgumentError, "invalid value for 'enable_bruteforce_prevention', must be one of #{validator.allowable_values}."
      end
      @enable_bruteforce_prevention = enable_bruteforce_prevention
    end

    # Custom attribute writer method with validation
    # @param [Object] max_failed_attempts Value to be assigned
    def max_failed_attempts=(max_failed_attempts)

      if !max_failed_attempts.nil? && max_failed_attempts < 1
        fail ArgumentError, "invalid value for 'max_failed_attempts', must be greater than or equal to 1."
      end

      @max_failed_attempts = max_failed_attempts
    end

    # Custom attribute writer method with validation
    # @param [Object] creation_timeout Value to be assigned
    def creation_timeout=(creation_timeout)

      if !creation_timeout.nil? && creation_timeout < 1
        fail ArgumentError, "invalid value for 'creation_timeout', must be greater than or equal to 1."
      end

      @creation_timeout = creation_timeout
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kerberos_enable_delegation Object to be assigned
    def kerberos_enable_delegation=(kerberos_enable_delegation)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(kerberos_enable_delegation)
        fail ArgumentError, "invalid value for 'kerberos_enable_delegation', must be one of #{validator.allowable_values}."
      end
      @kerberos_enable_delegation = kerberos_enable_delegation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      validator = EnumAttributeValidator.new('String', ["Allow", "Default"])
      unless validator.valid?(action)
        fail ArgumentError, "invalid value for 'action', must be one of #{validator.allowable_values}."
      end
      @action = action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kerberos_debug_status Object to be assigned
    def kerberos_debug_status=(kerberos_debug_status)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(kerberos_debug_status)
        fail ArgumentError, "invalid value for 'kerberos_debug_status', must be one of #{validator.allowable_values}."
      end
      @kerberos_debug_status = kerberos_debug_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          login_page == o.login_page &&
          dual_login_page == o.dual_login_page &&
          service_provider_org_name == o.service_provider_org_name &&
          login_failed_page == o.login_failed_page &&
          kerberos_spn == o.kerberos_spn &&
          signing_certificate == o.signing_certificate &&
          login_processor_path == o.login_processor_path &&
          count_window == o.count_window &&
          service_provider_entity_id == o.service_provider_entity_id &&
          send_domain_name == o.send_domain_name &&
          cookie_domain == o.cookie_domain &&
          login_successful_page == o.login_successful_page &&
          session_timeout_for_activesync == o.session_timeout_for_activesync &&
          groups == o.groups &&
          service_provider_display_name == o.service_provider_display_name &&
          master_service_url == o.master_service_url &&
          encryption_certificate == o.encryption_certificate &&
          authentication_service == o.authentication_service &&
          logout_successful_page == o.logout_successful_page &&
          logout_page == o.logout_page &&
          challenge_user_field == o.challenge_user_field &&
          master_service == o.master_service &&
          access_denied_page == o.access_denied_page &&
          cookie_path == o.cookie_path &&
          login_challenge_page == o.login_challenge_page &&
          service_provider_org_url == o.service_provider_org_url &&
          idle_timeout == o.idle_timeout &&
          password_expired_url == o.password_expired_url &&
          status == o.status &&
          post_processor_path == o.post_processor_path &&
          dual_authentication == o.dual_authentication &&
          sso_cookie_update_interval == o.sso_cookie_update_interval &&
          challenge_prompt_field == o.challenge_prompt_field &&
          enable_bruteforce_prevention == o.enable_bruteforce_prevention &&
          max_failed_attempts == o.max_failed_attempts &&
          creation_timeout == o.creation_timeout &&
          kerberos_enable_delegation == o.kerberos_enable_delegation &&
          secondary_authentication_service == o.secondary_authentication_service &&
          action == o.action &&
          kerberos_debug_status == o.kerberos_debug_status &&
          logout_processor_path == o.logout_processor_path
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [login_page, dual_login_page, service_provider_org_name, login_failed_page, kerberos_spn, signing_certificate, login_processor_path, count_window, service_provider_entity_id, send_domain_name, cookie_domain, login_successful_page, session_timeout_for_activesync, groups, service_provider_display_name, master_service_url, encryption_certificate, authentication_service, logout_successful_page, logout_page, challenge_user_field, master_service, access_denied_page, cookie_path, login_challenge_page, service_provider_org_url, idle_timeout, password_expired_url, status, post_processor_path, dual_authentication, sso_cookie_update_interval, challenge_prompt_field, enable_bruteforce_prevention, max_failed_attempts, creation_timeout, kerberos_enable_delegation, secondary_authentication_service, action, kerberos_debug_status, logout_processor_path].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
