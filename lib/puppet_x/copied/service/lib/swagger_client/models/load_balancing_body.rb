=begin
#load balancing API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class LoadBalancingBody
    # Persistence Cookie Domain
    attr_accessor :persistence_cookie_domain

    # Algorithm
    attr_accessor :algorithm

    # Source IP
    attr_accessor :source_ip_netmask

    # Persistence Method
    attr_accessor :persistence_method

    # Cookie Age
    attr_accessor :cookie_age

    # Idle Timeout
    attr_accessor :persistence_idle_timeout

    # Persistence Cookie Name
    attr_accessor :persistence_cookie_name

    # Persistence Cookie Path
    attr_accessor :persistence_cookie_path

    # Parameter Name
    attr_accessor :parameter_name

    # Failover Method
    attr_accessor :failover_method

    # Header Name
    attr_accessor :header_name

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'persistence_cookie_domain' => :'persistence-cookie-domain',
        :'algorithm' => :'algorithm',
        :'source_ip_netmask' => :'source-ip-netmask',
        :'persistence_method' => :'persistence-method',
        :'cookie_age' => :'cookie-age',
        :'persistence_idle_timeout' => :'persistence-idle-timeout',
        :'persistence_cookie_name' => :'persistence-cookie-name',
        :'persistence_cookie_path' => :'persistence-cookie-path',
        :'parameter_name' => :'parameter-name',
        :'failover_method' => :'failover-method',
        :'header_name' => :'header-name'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'persistence_cookie_domain' => :'String',
        :'algorithm' => :'String',
        :'source_ip_netmask' => :'String',
        :'persistence_method' => :'String',
        :'cookie_age' => :'Integer',
        :'persistence_idle_timeout' => :'Integer',
        :'persistence_cookie_name' => :'String',
        :'persistence_cookie_path' => :'String',
        :'parameter_name' => :'String',
        :'failover_method' => :'String',
        :'header_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'persistence-cookie-domain')
        self.persistence_cookie_domain = attributes[:'persistence-cookie-domain']
      end

      if attributes.has_key?(:'algorithm')
        self.algorithm = attributes[:'algorithm']
      else
        self.algorithm = "Round Robin"
      end

      if attributes.has_key?(:'source-ip-netmask')
        self.source_ip_netmask = attributes[:'source-ip-netmask']
      end

      if attributes.has_key?(:'persistence-method')
        self.persistence_method = attributes[:'persistence-method']
      else
        self.persistence_method = "None"
      end

      if attributes.has_key?(:'cookie-age')
        self.cookie_age = attributes[:'cookie-age']
      end

      if attributes.has_key?(:'persistence-idle-timeout')
        self.persistence_idle_timeout = attributes[:'persistence-idle-timeout']
      end

      if attributes.has_key?(:'persistence-cookie-name')
        self.persistence_cookie_name = attributes[:'persistence-cookie-name']
      else
        self.persistence_cookie_name = "persistence"
      end

      if attributes.has_key?(:'persistence-cookie-path')
        self.persistence_cookie_path = attributes[:'persistence-cookie-path']
      else
        self.persistence_cookie_path = "/"
      end

      if attributes.has_key?(:'parameter-name')
        self.parameter_name = attributes[:'parameter-name']
      end

      if attributes.has_key?(:'failover-method')
        self.failover_method = attributes[:'failover-method']
      else
        self.failover_method = "Load Balance"
      end

      if attributes.has_key?(:'header-name')
        self.header_name = attributes[:'header-name']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@cookie_age.nil? && @cookie_age < 1
        invalid_properties.push("invalid value for 'cookie_age', must be greater than or equal to 1.")
      end

      if !@persistence_idle_timeout.nil? && @persistence_idle_timeout < 0
        invalid_properties.push("invalid value for 'persistence_idle_timeout', must be greater than or equal to 0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      algorithm_validator = EnumAttributeValidator.new('String', ["Round Robin", "Weighted Round Robin", "Least Requests"])
      return false unless algorithm_validator.valid?(@algorithm)
      persistence_method_validator = EnumAttributeValidator.new('String', ["None", "Source IP", "Cookie Insert", "Cookie Passive", "HTTP Header", "URL Parameter"])
      return false unless persistence_method_validator.valid?(@persistence_method)
      return false if !@cookie_age.nil? && @cookie_age < 1
      return false if !@persistence_idle_timeout.nil? && @persistence_idle_timeout < 0
      failover_method_validator = EnumAttributeValidator.new('String', ["Load Balance", "Error"])
      return false unless failover_method_validator.valid?(@failover_method)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] algorithm Object to be assigned
    def algorithm=(algorithm)
      validator = EnumAttributeValidator.new('String', ["Round Robin", "Weighted Round Robin", "Least Requests"])
      unless validator.valid?(algorithm)
        fail ArgumentError, "invalid value for 'algorithm', must be one of #{validator.allowable_values}."
      end
      @algorithm = algorithm
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] persistence_method Object to be assigned
    def persistence_method=(persistence_method)
      validator = EnumAttributeValidator.new('String', ["None", "Source IP", "Cookie Insert", "Cookie Passive", "HTTP Header", "URL Parameter"])
      unless validator.valid?(persistence_method)
        fail ArgumentError, "invalid value for 'persistence_method', must be one of #{validator.allowable_values}."
      end
      @persistence_method = persistence_method
    end

    # Custom attribute writer method with validation
    # @param [Object] cookie_age Value to be assigned
    def cookie_age=(cookie_age)

      if !cookie_age.nil? && cookie_age < 1
        fail ArgumentError, "invalid value for 'cookie_age', must be greater than or equal to 1."
      end

      @cookie_age = cookie_age
    end

    # Custom attribute writer method with validation
    # @param [Object] persistence_idle_timeout Value to be assigned
    def persistence_idle_timeout=(persistence_idle_timeout)

      if !persistence_idle_timeout.nil? && persistence_idle_timeout < 0
        fail ArgumentError, "invalid value for 'persistence_idle_timeout', must be greater than or equal to 0."
      end

      @persistence_idle_timeout = persistence_idle_timeout
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failover_method Object to be assigned
    def failover_method=(failover_method)
      validator = EnumAttributeValidator.new('String', ["Load Balance", "Error"])
      unless validator.valid?(failover_method)
        fail ArgumentError, "invalid value for 'failover_method', must be one of #{validator.allowable_values}."
      end
      @failover_method = failover_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          persistence_cookie_domain == o.persistence_cookie_domain &&
          algorithm == o.algorithm &&
          source_ip_netmask == o.source_ip_netmask &&
          persistence_method == o.persistence_method &&
          cookie_age == o.cookie_age &&
          persistence_idle_timeout == o.persistence_idle_timeout &&
          persistence_cookie_name == o.persistence_cookie_name &&
          persistence_cookie_path == o.persistence_cookie_path &&
          parameter_name == o.parameter_name &&
          failover_method == o.failover_method &&
          header_name == o.header_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [persistence_cookie_domain, algorithm, source_ip_netmask, persistence_method, cookie_age, persistence_idle_timeout, persistence_cookie_name, persistence_cookie_path, parameter_name, failover_method, header_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
