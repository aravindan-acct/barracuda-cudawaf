=begin
#advanced configuration API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class AdvancedConfigurationBody
    # Enable VDI
    attr_accessor :enable_vdi

    # Enable Web Application Firewall
    attr_accessor :enable_web_application_firewall

    # Enable WebSocket
    attr_accessor :enable_websocket

    # Keepalive Requests
    attr_accessor :keepalive_requests

    attr_accessor :accept_list_status

    # NTLM Ignore Extra Data
    attr_accessor :ntlm_ignore_extra_data

    # Enable HTTP2
    attr_accessor :enable_http2

    # Enable Proxy Protocol
    attr_accessor :enable_proxy_protocol

    attr_accessor :proxy_list_status

    attr_accessor :accept_list

    attr_accessor :proxy_list

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'enable_vdi' => :'enable-vdi',
        :'enable_web_application_firewall' => :'enable-web-application-firewall',
        :'enable_websocket' => :'enable-websocket',
        :'keepalive_requests' => :'keepalive-requests',
        :'accept_list_status' => :'accept-list-status',
        :'ntlm_ignore_extra_data' => :'ntlm-ignore-extra-data',
        :'enable_http2' => :'enable-http2',
        :'enable_proxy_protocol' => :'enable-proxy-protocol',
        :'proxy_list_status' => :'proxy-list-status',
        :'accept_list' => :'accept-list',
        :'proxy_list' => :'proxy-list'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'enable_vdi' => :'String',
        :'enable_web_application_firewall' => :'String',
        :'enable_websocket' => :'String',
        :'keepalive_requests' => :'Integer',
        :'accept_list_status' => :'String',
        :'ntlm_ignore_extra_data' => :'String',
        :'enable_http2' => :'String',
        :'enable_proxy_protocol' => :'String',
        :'proxy_list_status' => :'String',
        :'accept_list' => :'String',
        :'proxy_list' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'enable-vdi')
        self.enable_vdi = attributes[:'enable-vdi']
      else
        self.enable_vdi = "No"
      end

      if attributes.has_key?(:'enable-web-application-firewall')
        self.enable_web_application_firewall = attributes[:'enable-web-application-firewall']
      else
        self.enable_web_application_firewall = "Yes"
      end

      if attributes.has_key?(:'enable-websocket')
        self.enable_websocket = attributes[:'enable-websocket']
      else
        self.enable_websocket = "No"
      end

      if attributes.has_key?(:'keepalive-requests')
        self.keepalive_requests = attributes[:'keepalive-requests']
      end

      if attributes.has_key?(:'accept-list-status')
        self.accept_list_status = attributes[:'accept-list-status']
      else
        self.accept_list_status = "No"
      end

      if attributes.has_key?(:'ntlm-ignore-extra-data')
        self.ntlm_ignore_extra_data = attributes[:'ntlm-ignore-extra-data']
      else
        self.ntlm_ignore_extra_data = "No"
      end

      if attributes.has_key?(:'enable-http2')
        self.enable_http2 = attributes[:'enable-http2']
      else
        self.enable_http2 = "No"
      end

      if attributes.has_key?(:'enable-proxy-protocol')
        self.enable_proxy_protocol = attributes[:'enable-proxy-protocol']
      else
        self.enable_proxy_protocol = "No"
      end

      if attributes.has_key?(:'proxy-list-status')
        self.proxy_list_status = attributes[:'proxy-list-status']
      else
        self.proxy_list_status = "No"
      end

      if attributes.has_key?(:'accept-list')
        self.accept_list = attributes[:'accept-list']
      end

      if attributes.has_key?(:'proxy-list')
        self.proxy_list = attributes[:'proxy-list']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@keepalive_requests.nil? && @keepalive_requests < 0
        invalid_properties.push("invalid value for 'keepalive_requests', must be greater than or equal to 0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      enable_vdi_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_vdi_validator.valid?(@enable_vdi)
      enable_web_application_firewall_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_web_application_firewall_validator.valid?(@enable_web_application_firewall)
      enable_websocket_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_websocket_validator.valid?(@enable_websocket)
      return false if !@keepalive_requests.nil? && @keepalive_requests < 0
      accept_list_status_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless accept_list_status_validator.valid?(@accept_list_status)
      ntlm_ignore_extra_data_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless ntlm_ignore_extra_data_validator.valid?(@ntlm_ignore_extra_data)
      enable_http2_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_http2_validator.valid?(@enable_http2)
      enable_proxy_protocol_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_proxy_protocol_validator.valid?(@enable_proxy_protocol)
      proxy_list_status_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless proxy_list_status_validator.valid?(@proxy_list_status)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_vdi Object to be assigned
    def enable_vdi=(enable_vdi)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_vdi)
        fail ArgumentError, "invalid value for 'enable_vdi', must be one of #{validator.allowable_values}."
      end
      @enable_vdi = enable_vdi
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_web_application_firewall Object to be assigned
    def enable_web_application_firewall=(enable_web_application_firewall)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_web_application_firewall)
        fail ArgumentError, "invalid value for 'enable_web_application_firewall', must be one of #{validator.allowable_values}."
      end
      @enable_web_application_firewall = enable_web_application_firewall
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_websocket Object to be assigned
    def enable_websocket=(enable_websocket)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_websocket)
        fail ArgumentError, "invalid value for 'enable_websocket', must be one of #{validator.allowable_values}."
      end
      @enable_websocket = enable_websocket
    end

    # Custom attribute writer method with validation
    # @param [Object] keepalive_requests Value to be assigned
    def keepalive_requests=(keepalive_requests)

      if !keepalive_requests.nil? && keepalive_requests < 0
        fail ArgumentError, "invalid value for 'keepalive_requests', must be greater than or equal to 0."
      end

      @keepalive_requests = keepalive_requests
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] accept_list_status Object to be assigned
    def accept_list_status=(accept_list_status)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(accept_list_status)
        fail ArgumentError, "invalid value for 'accept_list_status', must be one of #{validator.allowable_values}."
      end
      @accept_list_status = accept_list_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ntlm_ignore_extra_data Object to be assigned
    def ntlm_ignore_extra_data=(ntlm_ignore_extra_data)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(ntlm_ignore_extra_data)
        fail ArgumentError, "invalid value for 'ntlm_ignore_extra_data', must be one of #{validator.allowable_values}."
      end
      @ntlm_ignore_extra_data = ntlm_ignore_extra_data
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_http2 Object to be assigned
    def enable_http2=(enable_http2)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_http2)
        fail ArgumentError, "invalid value for 'enable_http2', must be one of #{validator.allowable_values}."
      end
      @enable_http2 = enable_http2
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_proxy_protocol Object to be assigned
    def enable_proxy_protocol=(enable_proxy_protocol)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_proxy_protocol)
        fail ArgumentError, "invalid value for 'enable_proxy_protocol', must be one of #{validator.allowable_values}."
      end
      @enable_proxy_protocol = enable_proxy_protocol
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] proxy_list_status Object to be assigned
    def proxy_list_status=(proxy_list_status)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(proxy_list_status)
        fail ArgumentError, "invalid value for 'proxy_list_status', must be one of #{validator.allowable_values}."
      end
      @proxy_list_status = proxy_list_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enable_vdi == o.enable_vdi &&
          enable_web_application_firewall == o.enable_web_application_firewall &&
          enable_websocket == o.enable_websocket &&
          keepalive_requests == o.keepalive_requests &&
          accept_list_status == o.accept_list_status &&
          ntlm_ignore_extra_data == o.ntlm_ignore_extra_data &&
          enable_http2 == o.enable_http2 &&
          enable_proxy_protocol == o.enable_proxy_protocol &&
          proxy_list_status == o.proxy_list_status &&
          accept_list == o.accept_list &&
          proxy_list == o.proxy_list
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [enable_vdi, enable_web_application_firewall, enable_websocket, keepalive_requests, accept_list_status, ntlm_ignore_extra_data, enable_http2, enable_proxy_protocol, proxy_list_status, accept_list, proxy_list].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
