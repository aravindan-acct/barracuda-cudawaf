=begin
#ssl security API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class SslSecurityBody
    # Ciphers
    attr_accessor :ciphers

    # Enable SNI
    attr_accessor :enable_sni

    # Status
    attr_accessor :status

    # Secure Site Domain
    attr_accessor :secure_site_domain

    # Certificate
    attr_accessor :certificate

    # Enter HSTS Max-Age
    attr_accessor :hsts_max_age

    # Domain Certificate
    attr_accessor :sni_certificate

    # Enable Strict SNI Check
    attr_accessor :enable_strict_sni_check

    # ECDSA Certificate
    attr_accessor :ecdsa_certificate

    # Domain
    attr_accessor :domain

    # SSL 3.0
    attr_accessor :enable_ssl_3

    # TLS 1.1
    attr_accessor :enable_tls_1_1

    # Enable HSTS
    attr_accessor :enable_hsts

    # TLS 1.2
    attr_accessor :enable_tls_1_2

    # Include HSTS Sub-Domains
    attr_accessor :include_hsts_sub_domains

    # Domain ECDSA Certificate
    attr_accessor :sni_ecdsa_certificate

    attr_accessor :selected_ciphers

    # Enable Perfect Forward Secrecy
    attr_accessor :enable_pfs

    # TLS 1.0 (Insecure)
    attr_accessor :enable_tls_1

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ciphers' => :'ciphers',
        :'enable_sni' => :'enable-sni',
        :'status' => :'status',
        :'secure_site_domain' => :'secure-site-domain',
        :'certificate' => :'certificate',
        :'hsts_max_age' => :'hsts-max-age',
        :'sni_certificate' => :'sni-certificate',
        :'enable_strict_sni_check' => :'enable-strict-sni-check',
        :'ecdsa_certificate' => :'ecdsa-certificate',
        :'domain' => :'domain',
        :'enable_ssl_3' => :'enable-ssl-3',
        :'enable_tls_1_1' => :'enable-tls-1-1',
        :'enable_hsts' => :'enable-hsts',
        :'enable_tls_1_2' => :'enable-tls-1-2',
        :'include_hsts_sub_domains' => :'include-hsts-sub-domains',
        :'sni_ecdsa_certificate' => :'sni-ecdsa-certificate',
        :'selected_ciphers' => :'selected-ciphers',
        :'enable_pfs' => :'enable-pfs',
        :'enable_tls_1' => :'enable-tls-1'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'ciphers' => :'String',
        :'enable_sni' => :'String',
        :'status' => :'String',
        :'secure_site_domain' => :'String',
        :'certificate' => :'String',
        :'hsts_max_age' => :'Integer',
        :'sni_certificate' => :'String',
        :'enable_strict_sni_check' => :'String',
        :'ecdsa_certificate' => :'String',
        :'domain' => :'String',
        :'enable_ssl_3' => :'String',
        :'enable_tls_1_1' => :'String',
        :'enable_hsts' => :'String',
        :'enable_tls_1_2' => :'String',
        :'include_hsts_sub_domains' => :'String',
        :'sni_ecdsa_certificate' => :'String',
        :'selected_ciphers' => :'String',
        :'enable_pfs' => :'String',
        :'enable_tls_1' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'ciphers')
        self.ciphers = attributes[:'ciphers']
      else
        self.ciphers = "Default"
      end

      if attributes.has_key?(:'enable-sni')
        self.enable_sni = attributes[:'enable-sni']
      else
        self.enable_sni = "No"
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = "Off"
      end

      if attributes.has_key?(:'secure-site-domain')
        self.secure_site_domain = attributes[:'secure-site-domain']
      end

      if attributes.has_key?(:'certificate')
        self.certificate = attributes[:'certificate']
      end

      if attributes.has_key?(:'hsts-max-age')
        self.hsts_max_age = attributes[:'hsts-max-age']
      end

      if attributes.has_key?(:'sni-certificate')
        self.sni_certificate = attributes[:'sni-certificate']
      end

      if attributes.has_key?(:'enable-strict-sni-check')
        self.enable_strict_sni_check = attributes[:'enable-strict-sni-check']
      else
        self.enable_strict_sni_check = "No"
      end

      if attributes.has_key?(:'ecdsa-certificate')
        self.ecdsa_certificate = attributes[:'ecdsa-certificate']
      end

      if attributes.has_key?(:'domain')
        self.domain = attributes[:'domain']
      end

      if attributes.has_key?(:'enable-ssl-3')
        self.enable_ssl_3 = attributes[:'enable-ssl-3']
      else
        self.enable_ssl_3 = "No"
      end

      if attributes.has_key?(:'enable-tls-1-1')
        self.enable_tls_1_1 = attributes[:'enable-tls-1-1']
      else
        self.enable_tls_1_1 = "Yes"
      end

      if attributes.has_key?(:'enable-hsts')
        self.enable_hsts = attributes[:'enable-hsts']
      else
        self.enable_hsts = "No"
      end

      if attributes.has_key?(:'enable-tls-1-2')
        self.enable_tls_1_2 = attributes[:'enable-tls-1-2']
      else
        self.enable_tls_1_2 = "Yes"
      end

      if attributes.has_key?(:'include-hsts-sub-domains')
        self.include_hsts_sub_domains = attributes[:'include-hsts-sub-domains']
      else
        self.include_hsts_sub_domains = "No"
      end

      if attributes.has_key?(:'sni-ecdsa-certificate')
        self.sni_ecdsa_certificate = attributes[:'sni-ecdsa-certificate']
      end

      if attributes.has_key?(:'selected-ciphers')
        self.selected_ciphers = attributes[:'selected-ciphers']
      else
        self.selected_ciphers = "ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,AES256-GCM-SHA384,AES128-GCM-SHA256,AES256-SHA256,AES128-SHA256,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES256-SHA,ECDHE-ECDSA-DES-CBC3-SHA,ECDHE-RSA-DES-CBC3-SHA,ECDHE-ECDSA-AES128-SHA,ECDHE-RSA-AES128-SHA,AES256-SHA,DHE-RSA-AES256-GCM-SHA384,DHE-RSA-AES256-SHA256,DHE-RSA-AES256-SHA,DHE-RSA-CAMELLIA256-SHA,DHE-RSA-AES128-GCM-SHA256,DHE-RSA-AES128-SHA256,DHE-RSA-AES128-SHA,DHE-RSA-CAMELLIA128-SHA,EDH-RSA-DES-CBC3-SHA,CAMELLIA256-SHA,DES-CBC3-SHA,AES128-SHA,CAMELLIA128-SHA"
      end

      if attributes.has_key?(:'enable-pfs')
        self.enable_pfs = attributes[:'enable-pfs']
      else
        self.enable_pfs = "No"
      end

      if attributes.has_key?(:'enable-tls-1')
        self.enable_tls_1 = attributes[:'enable-tls-1']
      else
        self.enable_tls_1 = "No"
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@hsts_max_age.nil? && @hsts_max_age < 0
        invalid_properties.push("invalid value for 'hsts_max_age', must be greater than or equal to 0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      ciphers_validator = EnumAttributeValidator.new('String', ["Default", "Custom"])
      return false unless ciphers_validator.valid?(@ciphers)
      enable_sni_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_sni_validator.valid?(@enable_sni)
      status_validator = EnumAttributeValidator.new('String', ["On", "Off"])
      return false unless status_validator.valid?(@status)
      return false if !@hsts_max_age.nil? && @hsts_max_age < 0
      enable_strict_sni_check_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_strict_sni_check_validator.valid?(@enable_strict_sni_check)
      enable_ssl_3_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_ssl_3_validator.valid?(@enable_ssl_3)
      enable_tls_1_1_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_tls_1_1_validator.valid?(@enable_tls_1_1)
      enable_hsts_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_hsts_validator.valid?(@enable_hsts)
      enable_tls_1_2_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_tls_1_2_validator.valid?(@enable_tls_1_2)
      include_hsts_sub_domains_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless include_hsts_sub_domains_validator.valid?(@include_hsts_sub_domains)
      enable_pfs_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_pfs_validator.valid?(@enable_pfs)
      enable_tls_1_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_tls_1_validator.valid?(@enable_tls_1)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ciphers Object to be assigned
    def ciphers=(ciphers)
      validator = EnumAttributeValidator.new('String', ["Default", "Custom"])
      unless validator.valid?(ciphers)
        fail ArgumentError, "invalid value for 'ciphers', must be one of #{validator.allowable_values}."
      end
      @ciphers = ciphers
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_sni Object to be assigned
    def enable_sni=(enable_sni)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_sni)
        fail ArgumentError, "invalid value for 'enable_sni', must be one of #{validator.allowable_values}."
      end
      @enable_sni = enable_sni
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["On", "Off"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for 'status', must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] hsts_max_age Value to be assigned
    def hsts_max_age=(hsts_max_age)

      if !hsts_max_age.nil? && hsts_max_age < 0
        fail ArgumentError, "invalid value for 'hsts_max_age', must be greater than or equal to 0."
      end

      @hsts_max_age = hsts_max_age
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_strict_sni_check Object to be assigned
    def enable_strict_sni_check=(enable_strict_sni_check)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_strict_sni_check)
        fail ArgumentError, "invalid value for 'enable_strict_sni_check', must be one of #{validator.allowable_values}."
      end
      @enable_strict_sni_check = enable_strict_sni_check
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_ssl_3 Object to be assigned
    def enable_ssl_3=(enable_ssl_3)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_ssl_3)
        fail ArgumentError, "invalid value for 'enable_ssl_3', must be one of #{validator.allowable_values}."
      end
      @enable_ssl_3 = enable_ssl_3
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_tls_1_1 Object to be assigned
    def enable_tls_1_1=(enable_tls_1_1)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_tls_1_1)
        fail ArgumentError, "invalid value for 'enable_tls_1_1', must be one of #{validator.allowable_values}."
      end
      @enable_tls_1_1 = enable_tls_1_1
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_hsts Object to be assigned
    def enable_hsts=(enable_hsts)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_hsts)
        fail ArgumentError, "invalid value for 'enable_hsts', must be one of #{validator.allowable_values}."
      end
      @enable_hsts = enable_hsts
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_tls_1_2 Object to be assigned
    def enable_tls_1_2=(enable_tls_1_2)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_tls_1_2)
        fail ArgumentError, "invalid value for 'enable_tls_1_2', must be one of #{validator.allowable_values}."
      end
      @enable_tls_1_2 = enable_tls_1_2
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] include_hsts_sub_domains Object to be assigned
    def include_hsts_sub_domains=(include_hsts_sub_domains)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(include_hsts_sub_domains)
        fail ArgumentError, "invalid value for 'include_hsts_sub_domains', must be one of #{validator.allowable_values}."
      end
      @include_hsts_sub_domains = include_hsts_sub_domains
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_pfs Object to be assigned
    def enable_pfs=(enable_pfs)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_pfs)
        fail ArgumentError, "invalid value for 'enable_pfs', must be one of #{validator.allowable_values}."
      end
      @enable_pfs = enable_pfs
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_tls_1 Object to be assigned
    def enable_tls_1=(enable_tls_1)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_tls_1)
        fail ArgumentError, "invalid value for 'enable_tls_1', must be one of #{validator.allowable_values}."
      end
      @enable_tls_1 = enable_tls_1
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ciphers == o.ciphers &&
          enable_sni == o.enable_sni &&
          status == o.status &&
          secure_site_domain == o.secure_site_domain &&
          certificate == o.certificate &&
          hsts_max_age == o.hsts_max_age &&
          sni_certificate == o.sni_certificate &&
          enable_strict_sni_check == o.enable_strict_sni_check &&
          ecdsa_certificate == o.ecdsa_certificate &&
          domain == o.domain &&
          enable_ssl_3 == o.enable_ssl_3 &&
          enable_tls_1_1 == o.enable_tls_1_1 &&
          enable_hsts == o.enable_hsts &&
          enable_tls_1_2 == o.enable_tls_1_2 &&
          include_hsts_sub_domains == o.include_hsts_sub_domains &&
          sni_ecdsa_certificate == o.sni_ecdsa_certificate &&
          selected_ciphers == o.selected_ciphers &&
          enable_pfs == o.enable_pfs &&
          enable_tls_1 == o.enable_tls_1
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [ciphers, enable_sni, status, secure_site_domain, certificate, hsts_max_age, sni_certificate, enable_strict_sni_check, ecdsa_certificate, domain, enable_ssl_3, enable_tls_1_1, enable_hsts, enable_tls_1_2, include_hsts_sub_domains, sni_ecdsa_certificate, selected_ciphers, enable_pfs, enable_tls_1].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
