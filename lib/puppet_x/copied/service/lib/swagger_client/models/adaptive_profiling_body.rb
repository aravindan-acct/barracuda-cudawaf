=begin
#adaptive profiling API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class AdaptiveProfilingBody
    # Ignore Parameters
    attr_accessor :ignore_parameters

    # Content Types
    attr_accessor :content_types

    # Trusted Hosts Group
    attr_accessor :trusted_host_group

    # Status
    attr_accessor :status

    # Response Learning
    attr_accessor :response_learning

    # Navigation Params
    attr_accessor :navigation_parameters

    # Request Learning
    attr_accessor :request_learning

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ignore_parameters' => :'ignore-parameters',
        :'content_types' => :'content-types',
        :'trusted_host_group' => :'trusted-host-group',
        :'status' => :'status',
        :'response_learning' => :'response-learning',
        :'navigation_parameters' => :'navigation-parameters',
        :'request_learning' => :'request-learning'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'ignore_parameters' => :'String',
        :'content_types' => :'String',
        :'trusted_host_group' => :'String',
        :'status' => :'String',
        :'response_learning' => :'String',
        :'navigation_parameters' => :'String',
        :'request_learning' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'ignore-parameters')
        self.ignore_parameters = attributes[:'ignore-parameters']
      end

      if attributes.has_key?(:'content-types')
        self.content_types = attributes[:'content-types']
      end

      if attributes.has_key?(:'trusted-host-group')
        self.trusted_host_group = attributes[:'trusted-host-group']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = "Off"
      end

      if attributes.has_key?(:'response-learning')
        self.response_learning = attributes[:'response-learning']
      else
        self.response_learning = "Successes and Redirects"
      end

      if attributes.has_key?(:'navigation-parameters')
        self.navigation_parameters = attributes[:'navigation-parameters']
      end

      if attributes.has_key?(:'request-learning')
        self.request_learning = attributes[:'request-learning']
      else
        self.request_learning = "Successes and Redirects"
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ["Off", "On"])
      return false unless status_validator.valid?(@status)
      response_learning_validator = EnumAttributeValidator.new('String', ["Successes and Redirects", "Successes Only", "Trusted", "None"])
      return false unless response_learning_validator.valid?(@response_learning)
      request_learning_validator = EnumAttributeValidator.new('String', ["Successes and Redirects", "Successes Only", "Trusted", "None"])
      return false unless request_learning_validator.valid?(@request_learning)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["Off", "On"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for 'status', must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] response_learning Object to be assigned
    def response_learning=(response_learning)
      validator = EnumAttributeValidator.new('String', ["Successes and Redirects", "Successes Only", "Trusted", "None"])
      unless validator.valid?(response_learning)
        fail ArgumentError, "invalid value for 'response_learning', must be one of #{validator.allowable_values}."
      end
      @response_learning = response_learning
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_learning Object to be assigned
    def request_learning=(request_learning)
      validator = EnumAttributeValidator.new('String', ["Successes and Redirects", "Successes Only", "Trusted", "None"])
      unless validator.valid?(request_learning)
        fail ArgumentError, "invalid value for 'request_learning', must be one of #{validator.allowable_values}."
      end
      @request_learning = request_learning
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ignore_parameters == o.ignore_parameters &&
          content_types == o.content_types &&
          trusted_host_group == o.trusted_host_group &&
          status == o.status &&
          response_learning == o.response_learning &&
          navigation_parameters == o.navigation_parameters &&
          request_learning == o.request_learning
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [ignore_parameters, content_types, trusted_host_group, status, response_learning, navigation_parameters, request_learning].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
