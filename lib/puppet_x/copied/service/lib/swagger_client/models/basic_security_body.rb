=begin
#basic security API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class BasicSecurityBody
    # Rate Control Status
    attr_accessor :rate_control_status

    # Rate Control Pool
    attr_accessor :rate_control_pool

    # Web Firewall Log Level
    attr_accessor :web_firewall_log_level

    # Trusted Hosts Group
    attr_accessor :trusted_hosts_group

    # Mode
    attr_accessor :mode

    # Header for Client IP Address
    attr_accessor :client_ip_addr_header

    # Ignore case
    attr_accessor :ignore_case

    # Trusted Hosts Action
    attr_accessor :trusted_hosts_action

    # Web Firewall Policy
    attr_accessor :web_firewall_policy

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'rate_control_status' => :'rate-control-status',
        :'rate_control_pool' => :'rate-control-pool',
        :'web_firewall_log_level' => :'web-firewall-log-level',
        :'trusted_hosts_group' => :'trusted-hosts-group',
        :'mode' => :'mode',
        :'client_ip_addr_header' => :'client-ip-addr-header',
        :'ignore_case' => :'ignore-case',
        :'trusted_hosts_action' => :'trusted-hosts-action',
        :'web_firewall_policy' => :'web-firewall-policy'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'rate_control_status' => :'String',
        :'rate_control_pool' => :'String',
        :'web_firewall_log_level' => :'String',
        :'trusted_hosts_group' => :'String',
        :'mode' => :'String',
        :'client_ip_addr_header' => :'String',
        :'ignore_case' => :'String',
        :'trusted_hosts_action' => :'String',
        :'web_firewall_policy' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'rate-control-status')
        self.rate_control_status = attributes[:'rate-control-status']
      else
        self.rate_control_status = "Off"
      end

      if attributes.has_key?(:'rate-control-pool')
        self.rate_control_pool = attributes[:'rate-control-pool']
      else
        self.rate_control_pool = "NONE"
      end

      if attributes.has_key?(:'web-firewall-log-level')
        self.web_firewall_log_level = attributes[:'web-firewall-log-level']
      else
        self.web_firewall_log_level = "5-Notice"
      end

      if attributes.has_key?(:'trusted-hosts-group')
        self.trusted_hosts_group = attributes[:'trusted-hosts-group']
      end

      if attributes.has_key?(:'mode')
        self.mode = attributes[:'mode']
      else
        self.mode = "Passive"
      end

      if attributes.has_key?(:'client-ip-addr-header')
        self.client_ip_addr_header = attributes[:'client-ip-addr-header']
      end

      if attributes.has_key?(:'ignore-case')
        self.ignore_case = attributes[:'ignore-case']
      else
        self.ignore_case = "Yes"
      end

      if attributes.has_key?(:'trusted-hosts-action')
        self.trusted_hosts_action = attributes[:'trusted-hosts-action']
      else
        self.trusted_hosts_action = "Default"
      end

      if attributes.has_key?(:'web-firewall-policy')
        self.web_firewall_policy = attributes[:'web-firewall-policy']
      else
        self.web_firewall_policy = "default"
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      rate_control_status_validator = EnumAttributeValidator.new('String', ["On", "Off"])
      return false unless rate_control_status_validator.valid?(@rate_control_status)
      web_firewall_log_level_validator = EnumAttributeValidator.new('String', ["0-Emergency", "1-Alert", "2-Critical", "3-Error", "4-Warning", "5-Notice", "6-Information", "7-Debug"])
      return false unless web_firewall_log_level_validator.valid?(@web_firewall_log_level)
      mode_validator = EnumAttributeValidator.new('String', ["Passive", "Active"])
      return false unless mode_validator.valid?(@mode)
      ignore_case_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless ignore_case_validator.valid?(@ignore_case)
      trusted_hosts_action_validator = EnumAttributeValidator.new('String', ["Allow", "Passive", "Default"])
      return false unless trusted_hosts_action_validator.valid?(@trusted_hosts_action)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rate_control_status Object to be assigned
    def rate_control_status=(rate_control_status)
      validator = EnumAttributeValidator.new('String', ["On", "Off"])
      unless validator.valid?(rate_control_status)
        fail ArgumentError, "invalid value for 'rate_control_status', must be one of #{validator.allowable_values}."
      end
      @rate_control_status = rate_control_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] web_firewall_log_level Object to be assigned
    def web_firewall_log_level=(web_firewall_log_level)
      validator = EnumAttributeValidator.new('String', ["0-Emergency", "1-Alert", "2-Critical", "3-Error", "4-Warning", "5-Notice", "6-Information", "7-Debug"])
      unless validator.valid?(web_firewall_log_level)
        fail ArgumentError, "invalid value for 'web_firewall_log_level', must be one of #{validator.allowable_values}."
      end
      @web_firewall_log_level = web_firewall_log_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mode Object to be assigned
    def mode=(mode)
      validator = EnumAttributeValidator.new('String', ["Passive", "Active"])
      unless validator.valid?(mode)
        fail ArgumentError, "invalid value for 'mode', must be one of #{validator.allowable_values}."
      end
      @mode = mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ignore_case Object to be assigned
    def ignore_case=(ignore_case)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(ignore_case)
        fail ArgumentError, "invalid value for 'ignore_case', must be one of #{validator.allowable_values}."
      end
      @ignore_case = ignore_case
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trusted_hosts_action Object to be assigned
    def trusted_hosts_action=(trusted_hosts_action)
      validator = EnumAttributeValidator.new('String', ["Allow", "Passive", "Default"])
      unless validator.valid?(trusted_hosts_action)
        fail ArgumentError, "invalid value for 'trusted_hosts_action', must be one of #{validator.allowable_values}."
      end
      @trusted_hosts_action = trusted_hosts_action
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          rate_control_status == o.rate_control_status &&
          rate_control_pool == o.rate_control_pool &&
          web_firewall_log_level == o.web_firewall_log_level &&
          trusted_hosts_group == o.trusted_hosts_group &&
          mode == o.mode &&
          client_ip_addr_header == o.client_ip_addr_header &&
          ignore_case == o.ignore_case &&
          trusted_hosts_action == o.trusted_hosts_action &&
          web_firewall_policy == o.web_firewall_policy
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [rate_control_status, rate_control_pool, web_firewall_log_level, trusted_hosts_group, mode, client_ip_addr_header, ignore_case, trusted_hosts_action, web_firewall_policy].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
