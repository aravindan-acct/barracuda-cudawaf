=begin
#Security Policy request limits API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class SecurityPolicyRequestLimitsBody
    # Max Number of Cookies
    attr_accessor :max_number_of_cookies

    # Max Header Name Length
    attr_accessor :max_header_name_length

    # Enable Request Limits
    attr_accessor :enable

    # Max Request Length
    attr_accessor :max_request_length

    # Max Number of Headers
    attr_accessor :max_number_of_headers

    # Max Cookie Value Length
    attr_accessor :max_cookie_value_length

    # Max Query Length
    attr_accessor :max_query_length

    # Max URL Length
    attr_accessor :max_url_length

    # Max Request Line Length
    attr_accessor :max_request_line_length

    # Max Header Value Length
    attr_accessor :max_header_value_length

    # Max Cookie Name Length
    attr_accessor :max_cookie_name_length

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'max_number_of_cookies' => :'max-number-of-cookies',
        :'max_header_name_length' => :'max-header-name-length',
        :'enable' => :'enable',
        :'max_request_length' => :'max-request-length',
        :'max_number_of_headers' => :'max-number-of-headers',
        :'max_cookie_value_length' => :'max-cookie-value-length',
        :'max_query_length' => :'max-query-length',
        :'max_url_length' => :'max-url-length',
        :'max_request_line_length' => :'max-request-line-length',
        :'max_header_value_length' => :'max-header-value-length',
        :'max_cookie_name_length' => :'max-cookie-name-length'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'max_number_of_cookies' => :'Integer',
        :'max_header_name_length' => :'Integer',
        :'enable' => :'String',
        :'max_request_length' => :'Integer',
        :'max_number_of_headers' => :'Integer',
        :'max_cookie_value_length' => :'Integer',
        :'max_query_length' => :'Integer',
        :'max_url_length' => :'Integer',
        :'max_request_line_length' => :'Integer',
        :'max_header_value_length' => :'Integer',
        :'max_cookie_name_length' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'max-number-of-cookies')
        self.max_number_of_cookies = attributes[:'max-number-of-cookies']
      end

      if attributes.has_key?(:'max-header-name-length')
        self.max_header_name_length = attributes[:'max-header-name-length']
      end

      if attributes.has_key?(:'enable')
        self.enable = attributes[:'enable']
      else
        self.enable = "Yes"
      end

      if attributes.has_key?(:'max-request-length')
        self.max_request_length = attributes[:'max-request-length']
      end

      if attributes.has_key?(:'max-number-of-headers')
        self.max_number_of_headers = attributes[:'max-number-of-headers']
      end

      if attributes.has_key?(:'max-cookie-value-length')
        self.max_cookie_value_length = attributes[:'max-cookie-value-length']
      end

      if attributes.has_key?(:'max-query-length')
        self.max_query_length = attributes[:'max-query-length']
      end

      if attributes.has_key?(:'max-url-length')
        self.max_url_length = attributes[:'max-url-length']
      end

      if attributes.has_key?(:'max-request-line-length')
        self.max_request_line_length = attributes[:'max-request-line-length']
      end

      if attributes.has_key?(:'max-header-value-length')
        self.max_header_value_length = attributes[:'max-header-value-length']
      end

      if attributes.has_key?(:'max-cookie-name-length')
        self.max_cookie_name_length = attributes[:'max-cookie-name-length']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@max_number_of_cookies.nil? && @max_number_of_cookies < 1
        invalid_properties.push("invalid value for 'max_number_of_cookies', must be greater than or equal to 1.")
      end

      if !@max_header_name_length.nil? && @max_header_name_length < 1
        invalid_properties.push("invalid value for 'max_header_name_length', must be greater than or equal to 1.")
      end

      if !@max_request_length.nil? && @max_request_length < 1
        invalid_properties.push("invalid value for 'max_request_length', must be greater than or equal to 1.")
      end

      if !@max_number_of_headers.nil? && @max_number_of_headers < 1
        invalid_properties.push("invalid value for 'max_number_of_headers', must be greater than or equal to 1.")
      end

      if !@max_cookie_value_length.nil? && @max_cookie_value_length < 1
        invalid_properties.push("invalid value for 'max_cookie_value_length', must be greater than or equal to 1.")
      end

      if !@max_query_length.nil? && @max_query_length < 1
        invalid_properties.push("invalid value for 'max_query_length', must be greater than or equal to 1.")
      end

      if !@max_url_length.nil? && @max_url_length < 1
        invalid_properties.push("invalid value for 'max_url_length', must be greater than or equal to 1.")
      end

      if !@max_request_line_length.nil? && @max_request_line_length < 1
        invalid_properties.push("invalid value for 'max_request_line_length', must be greater than or equal to 1.")
      end

      if !@max_header_value_length.nil? && @max_header_value_length < 1
        invalid_properties.push("invalid value for 'max_header_value_length', must be greater than or equal to 1.")
      end

      if !@max_cookie_name_length.nil? && @max_cookie_name_length < 1
        invalid_properties.push("invalid value for 'max_cookie_name_length', must be greater than or equal to 1.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@max_number_of_cookies.nil? && @max_number_of_cookies < 1
      return false if !@max_header_name_length.nil? && @max_header_name_length < 1
      enable_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_validator.valid?(@enable)
      return false if !@max_request_length.nil? && @max_request_length < 1
      return false if !@max_number_of_headers.nil? && @max_number_of_headers < 1
      return false if !@max_cookie_value_length.nil? && @max_cookie_value_length < 1
      return false if !@max_query_length.nil? && @max_query_length < 1
      return false if !@max_url_length.nil? && @max_url_length < 1
      return false if !@max_request_line_length.nil? && @max_request_line_length < 1
      return false if !@max_header_value_length.nil? && @max_header_value_length < 1
      return false if !@max_cookie_name_length.nil? && @max_cookie_name_length < 1
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] max_number_of_cookies Value to be assigned
    def max_number_of_cookies=(max_number_of_cookies)

      if !max_number_of_cookies.nil? && max_number_of_cookies < 1
        fail ArgumentError, "invalid value for 'max_number_of_cookies', must be greater than or equal to 1."
      end

      @max_number_of_cookies = max_number_of_cookies
    end

    # Custom attribute writer method with validation
    # @param [Object] max_header_name_length Value to be assigned
    def max_header_name_length=(max_header_name_length)

      if !max_header_name_length.nil? && max_header_name_length < 1
        fail ArgumentError, "invalid value for 'max_header_name_length', must be greater than or equal to 1."
      end

      @max_header_name_length = max_header_name_length
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable Object to be assigned
    def enable=(enable)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable)
        fail ArgumentError, "invalid value for 'enable', must be one of #{validator.allowable_values}."
      end
      @enable = enable
    end

    # Custom attribute writer method with validation
    # @param [Object] max_request_length Value to be assigned
    def max_request_length=(max_request_length)

      if !max_request_length.nil? && max_request_length < 1
        fail ArgumentError, "invalid value for 'max_request_length', must be greater than or equal to 1."
      end

      @max_request_length = max_request_length
    end

    # Custom attribute writer method with validation
    # @param [Object] max_number_of_headers Value to be assigned
    def max_number_of_headers=(max_number_of_headers)

      if !max_number_of_headers.nil? && max_number_of_headers < 1
        fail ArgumentError, "invalid value for 'max_number_of_headers', must be greater than or equal to 1."
      end

      @max_number_of_headers = max_number_of_headers
    end

    # Custom attribute writer method with validation
    # @param [Object] max_cookie_value_length Value to be assigned
    def max_cookie_value_length=(max_cookie_value_length)

      if !max_cookie_value_length.nil? && max_cookie_value_length < 1
        fail ArgumentError, "invalid value for 'max_cookie_value_length', must be greater than or equal to 1."
      end

      @max_cookie_value_length = max_cookie_value_length
    end

    # Custom attribute writer method with validation
    # @param [Object] max_query_length Value to be assigned
    def max_query_length=(max_query_length)

      if !max_query_length.nil? && max_query_length < 1
        fail ArgumentError, "invalid value for 'max_query_length', must be greater than or equal to 1."
      end

      @max_query_length = max_query_length
    end

    # Custom attribute writer method with validation
    # @param [Object] max_url_length Value to be assigned
    def max_url_length=(max_url_length)

      if !max_url_length.nil? && max_url_length < 1
        fail ArgumentError, "invalid value for 'max_url_length', must be greater than or equal to 1."
      end

      @max_url_length = max_url_length
    end

    # Custom attribute writer method with validation
    # @param [Object] max_request_line_length Value to be assigned
    def max_request_line_length=(max_request_line_length)

      if !max_request_line_length.nil? && max_request_line_length < 1
        fail ArgumentError, "invalid value for 'max_request_line_length', must be greater than or equal to 1."
      end

      @max_request_line_length = max_request_line_length
    end

    # Custom attribute writer method with validation
    # @param [Object] max_header_value_length Value to be assigned
    def max_header_value_length=(max_header_value_length)

      if !max_header_value_length.nil? && max_header_value_length < 1
        fail ArgumentError, "invalid value for 'max_header_value_length', must be greater than or equal to 1."
      end

      @max_header_value_length = max_header_value_length
    end

    # Custom attribute writer method with validation
    # @param [Object] max_cookie_name_length Value to be assigned
    def max_cookie_name_length=(max_cookie_name_length)

      if !max_cookie_name_length.nil? && max_cookie_name_length < 1
        fail ArgumentError, "invalid value for 'max_cookie_name_length', must be greater than or equal to 1."
      end

      @max_cookie_name_length = max_cookie_name_length
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          max_number_of_cookies == o.max_number_of_cookies &&
          max_header_name_length == o.max_header_name_length &&
          enable == o.enable &&
          max_request_length == o.max_request_length &&
          max_number_of_headers == o.max_number_of_headers &&
          max_cookie_value_length == o.max_cookie_value_length &&
          max_query_length == o.max_query_length &&
          max_url_length == o.max_url_length &&
          max_request_line_length == o.max_request_line_length &&
          max_header_value_length == o.max_header_value_length &&
          max_cookie_name_length == o.max_cookie_name_length
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [max_number_of_cookies, max_header_name_length, enable, max_request_length, max_number_of_headers, max_cookie_value_length, max_query_length, max_url_length, max_request_line_length, max_header_value_length, max_cookie_name_length].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
