=begin
#Security Policy cookie security API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class SecurityPolicyCookieSecurityBody
    # Cookie Replay Protection Type
    attr_accessor :cookie_replay_protection_type

    # Custom Headers
    attr_accessor :custom_headers

    # Secure Cookie
    attr_accessor :secure_cookie

    # HTTP Only
    attr_accessor :http_only

    # Tamper Proof Mode
    attr_accessor :tamper_proof_mode

    # Cookie Max Age
    attr_accessor :cookie_max_age

    # Cookies Exempted
    attr_accessor :cookies_exempted

    # Allow Unrecognized Cookies
    attr_accessor :allow_unrecognized_cookies

    # Days Allowed
    attr_accessor :days_allowed

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cookie_replay_protection_type' => :'cookie-replay-protection-type',
        :'custom_headers' => :'custom-headers',
        :'secure_cookie' => :'secure-cookie',
        :'http_only' => :'http-only',
        :'tamper_proof_mode' => :'tamper-proof-mode',
        :'cookie_max_age' => :'cookie-max-age',
        :'cookies_exempted' => :'cookies-exempted',
        :'allow_unrecognized_cookies' => :'allow-unrecognized-cookies',
        :'days_allowed' => :'days-allowed'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cookie_replay_protection_type' => :'String',
        :'custom_headers' => :'String',
        :'secure_cookie' => :'String',
        :'http_only' => :'String',
        :'tamper_proof_mode' => :'String',
        :'cookie_max_age' => :'Integer',
        :'cookies_exempted' => :'String',
        :'allow_unrecognized_cookies' => :'String',
        :'days_allowed' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'cookie-replay-protection-type')
        self.cookie_replay_protection_type = attributes[:'cookie-replay-protection-type']
      else
        self.cookie_replay_protection_type = "IP"
      end

      if attributes.has_key?(:'custom-headers')
        self.custom_headers = attributes[:'custom-headers']
      end

      if attributes.has_key?(:'secure-cookie')
        self.secure_cookie = attributes[:'secure-cookie']
      else
        self.secure_cookie = "No"
      end

      if attributes.has_key?(:'http-only')
        self.http_only = attributes[:'http-only']
      else
        self.http_only = "No"
      end

      if attributes.has_key?(:'tamper-proof-mode')
        self.tamper_proof_mode = attributes[:'tamper-proof-mode']
      else
        self.tamper_proof_mode = "Signed"
      end

      if attributes.has_key?(:'cookie-max-age')
        self.cookie_max_age = attributes[:'cookie-max-age']
      end

      if attributes.has_key?(:'cookies-exempted')
        self.cookies_exempted = attributes[:'cookies-exempted']
      end

      if attributes.has_key?(:'allow-unrecognized-cookies')
        self.allow_unrecognized_cookies = attributes[:'allow-unrecognized-cookies']
      else
        self.allow_unrecognized_cookies = "Custom"
      end

      if attributes.has_key?(:'days-allowed')
        self.days_allowed = attributes[:'days-allowed']
      else
        self.days_allowed = "7"
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@cookie_max_age.nil? && @cookie_max_age < 0
        invalid_properties.push("invalid value for 'cookie_max_age', must be greater than or equal to 0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      cookie_replay_protection_type_validator = EnumAttributeValidator.new('String', ["none", "IP", "Custom Headers", "IP and Custom Headers"])
      return false unless cookie_replay_protection_type_validator.valid?(@cookie_replay_protection_type)
      secure_cookie_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless secure_cookie_validator.valid?(@secure_cookie)
      http_only_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless http_only_validator.valid?(@http_only)
      tamper_proof_mode_validator = EnumAttributeValidator.new('String', ["Encrypted", "Signed", "None"])
      return false unless tamper_proof_mode_validator.valid?(@tamper_proof_mode)
      return false if !@cookie_max_age.nil? && @cookie_max_age < 0
      allow_unrecognized_cookies_validator = EnumAttributeValidator.new('String', ["Never", "Always", "Custom"])
      return false unless allow_unrecognized_cookies_validator.valid?(@allow_unrecognized_cookies)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cookie_replay_protection_type Object to be assigned
    def cookie_replay_protection_type=(cookie_replay_protection_type)
      validator = EnumAttributeValidator.new('String', ["none", "IP", "Custom Headers", "IP and Custom Headers"])
      unless validator.valid?(cookie_replay_protection_type)
        fail ArgumentError, "invalid value for 'cookie_replay_protection_type', must be one of #{validator.allowable_values}."
      end
      @cookie_replay_protection_type = cookie_replay_protection_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secure_cookie Object to be assigned
    def secure_cookie=(secure_cookie)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(secure_cookie)
        fail ArgumentError, "invalid value for 'secure_cookie', must be one of #{validator.allowable_values}."
      end
      @secure_cookie = secure_cookie
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] http_only Object to be assigned
    def http_only=(http_only)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(http_only)
        fail ArgumentError, "invalid value for 'http_only', must be one of #{validator.allowable_values}."
      end
      @http_only = http_only
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tamper_proof_mode Object to be assigned
    def tamper_proof_mode=(tamper_proof_mode)
      validator = EnumAttributeValidator.new('String', ["Encrypted", "Signed", "None"])
      unless validator.valid?(tamper_proof_mode)
        fail ArgumentError, "invalid value for 'tamper_proof_mode', must be one of #{validator.allowable_values}."
      end
      @tamper_proof_mode = tamper_proof_mode
    end

    # Custom attribute writer method with validation
    # @param [Object] cookie_max_age Value to be assigned
    def cookie_max_age=(cookie_max_age)

      if !cookie_max_age.nil? && cookie_max_age < 0
        fail ArgumentError, "invalid value for 'cookie_max_age', must be greater than or equal to 0."
      end

      @cookie_max_age = cookie_max_age
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] allow_unrecognized_cookies Object to be assigned
    def allow_unrecognized_cookies=(allow_unrecognized_cookies)
      validator = EnumAttributeValidator.new('String', ["Never", "Always", "Custom"])
      unless validator.valid?(allow_unrecognized_cookies)
        fail ArgumentError, "invalid value for 'allow_unrecognized_cookies', must be one of #{validator.allowable_values}."
      end
      @allow_unrecognized_cookies = allow_unrecognized_cookies
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cookie_replay_protection_type == o.cookie_replay_protection_type &&
          custom_headers == o.custom_headers &&
          secure_cookie == o.secure_cookie &&
          http_only == o.http_only &&
          tamper_proof_mode == o.tamper_proof_mode &&
          cookie_max_age == o.cookie_max_age &&
          cookies_exempted == o.cookies_exempted &&
          allow_unrecognized_cookies == o.allow_unrecognized_cookies &&
          days_allowed == o.days_allowed
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cookie_replay_protection_type, custom_headers, secure_cookie, http_only, tamper_proof_mode, cookie_max_age, cookies_exempted, allow_unrecognized_cookies, days_allowed].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
