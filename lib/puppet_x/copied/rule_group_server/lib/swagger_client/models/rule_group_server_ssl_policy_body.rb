=begin
#Rule Group Server ssl policy API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class RuleGroupServerSslPolicyBody
    # SSL 3.0
    attr_accessor :enable_ssl_3

    # Enable SNI
    attr_accessor :enable_sni

    # TLS 1.1
    attr_accessor :enable_tls_1_1

    # TLS 1.2
    attr_accessor :enable_tls_1_2

    # Enable SSL Compatibility Mode
    attr_accessor :enable_ssl_compatibility_mode

    # Client Certificate
    attr_accessor :client_certificate

    # Status
    attr_accessor :enable_https

    # Validate Server Certificate
    attr_accessor :validate_certificate

    # TLS 1.0 (Insecure)
    attr_accessor :enable_tls_1

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'enable_ssl_3' => :'enable-ssl-3',
        :'enable_sni' => :'enable-sni',
        :'enable_tls_1_1' => :'enable-tls-1-1',
        :'enable_tls_1_2' => :'enable-tls-1-2',
        :'enable_ssl_compatibility_mode' => :'enable-ssl-compatibility-mode',
        :'client_certificate' => :'client-certificate',
        :'enable_https' => :'enable-https',
        :'validate_certificate' => :'validate-certificate',
        :'enable_tls_1' => :'enable-tls-1'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'enable_ssl_3' => :'String',
        :'enable_sni' => :'String',
        :'enable_tls_1_1' => :'String',
        :'enable_tls_1_2' => :'String',
        :'enable_ssl_compatibility_mode' => :'String',
        :'client_certificate' => :'String',
        :'enable_https' => :'String',
        :'validate_certificate' => :'String',
        :'enable_tls_1' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'enable-ssl-3')
        self.enable_ssl_3 = attributes[:'enable-ssl-3']
      else
        self.enable_ssl_3 = "No"
      end

      if attributes.has_key?(:'enable-sni')
        self.enable_sni = attributes[:'enable-sni']
      else
        self.enable_sni = "No"
      end

      if attributes.has_key?(:'enable-tls-1-1')
        self.enable_tls_1_1 = attributes[:'enable-tls-1-1']
      else
        self.enable_tls_1_1 = "Yes"
      end

      if attributes.has_key?(:'enable-tls-1-2')
        self.enable_tls_1_2 = attributes[:'enable-tls-1-2']
      else
        self.enable_tls_1_2 = "Yes"
      end

      if attributes.has_key?(:'enable-ssl-compatibility-mode')
        self.enable_ssl_compatibility_mode = attributes[:'enable-ssl-compatibility-mode']
      else
        self.enable_ssl_compatibility_mode = "No"
      end

      if attributes.has_key?(:'client-certificate')
        self.client_certificate = attributes[:'client-certificate']
      end

      if attributes.has_key?(:'enable-https')
        self.enable_https = attributes[:'enable-https']
      else
        self.enable_https = "Off"
      end

      if attributes.has_key?(:'validate-certificate')
        self.validate_certificate = attributes[:'validate-certificate']
      else
        self.validate_certificate = "Yes"
      end

      if attributes.has_key?(:'enable-tls-1')
        self.enable_tls_1 = attributes[:'enable-tls-1']
      else
        self.enable_tls_1 = "No"
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      enable_ssl_3_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_ssl_3_validator.valid?(@enable_ssl_3)
      enable_sni_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_sni_validator.valid?(@enable_sni)
      enable_tls_1_1_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_tls_1_1_validator.valid?(@enable_tls_1_1)
      enable_tls_1_2_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_tls_1_2_validator.valid?(@enable_tls_1_2)
      enable_ssl_compatibility_mode_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_ssl_compatibility_mode_validator.valid?(@enable_ssl_compatibility_mode)
      enable_https_validator = EnumAttributeValidator.new('String', ["On", "Off"])
      return false unless enable_https_validator.valid?(@enable_https)
      validate_certificate_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless validate_certificate_validator.valid?(@validate_certificate)
      enable_tls_1_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_tls_1_validator.valid?(@enable_tls_1)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_ssl_3 Object to be assigned
    def enable_ssl_3=(enable_ssl_3)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_ssl_3)
        fail ArgumentError, "invalid value for 'enable_ssl_3', must be one of #{validator.allowable_values}."
      end
      @enable_ssl_3 = enable_ssl_3
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_sni Object to be assigned
    def enable_sni=(enable_sni)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_sni)
        fail ArgumentError, "invalid value for 'enable_sni', must be one of #{validator.allowable_values}."
      end
      @enable_sni = enable_sni
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_tls_1_1 Object to be assigned
    def enable_tls_1_1=(enable_tls_1_1)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_tls_1_1)
        fail ArgumentError, "invalid value for 'enable_tls_1_1', must be one of #{validator.allowable_values}."
      end
      @enable_tls_1_1 = enable_tls_1_1
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_tls_1_2 Object to be assigned
    def enable_tls_1_2=(enable_tls_1_2)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_tls_1_2)
        fail ArgumentError, "invalid value for 'enable_tls_1_2', must be one of #{validator.allowable_values}."
      end
      @enable_tls_1_2 = enable_tls_1_2
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_ssl_compatibility_mode Object to be assigned
    def enable_ssl_compatibility_mode=(enable_ssl_compatibility_mode)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_ssl_compatibility_mode)
        fail ArgumentError, "invalid value for 'enable_ssl_compatibility_mode', must be one of #{validator.allowable_values}."
      end
      @enable_ssl_compatibility_mode = enable_ssl_compatibility_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_https Object to be assigned
    def enable_https=(enable_https)
      validator = EnumAttributeValidator.new('String', ["On", "Off"])
      unless validator.valid?(enable_https)
        fail ArgumentError, "invalid value for 'enable_https', must be one of #{validator.allowable_values}."
      end
      @enable_https = enable_https
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] validate_certificate Object to be assigned
    def validate_certificate=(validate_certificate)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(validate_certificate)
        fail ArgumentError, "invalid value for 'validate_certificate', must be one of #{validator.allowable_values}."
      end
      @validate_certificate = validate_certificate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable_tls_1 Object to be assigned
    def enable_tls_1=(enable_tls_1)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable_tls_1)
        fail ArgumentError, "invalid value for 'enable_tls_1', must be one of #{validator.allowable_values}."
      end
      @enable_tls_1 = enable_tls_1
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enable_ssl_3 == o.enable_ssl_3 &&
          enable_sni == o.enable_sni &&
          enable_tls_1_1 == o.enable_tls_1_1 &&
          enable_tls_1_2 == o.enable_tls_1_2 &&
          enable_ssl_compatibility_mode == o.enable_ssl_compatibility_mode &&
          client_certificate == o.client_certificate &&
          enable_https == o.enable_https &&
          validate_certificate == o.validate_certificate &&
          enable_tls_1 == o.enable_tls_1
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [enable_ssl_3, enable_sni, enable_tls_1_1, enable_tls_1_2, enable_ssl_compatibility_mode, client_certificate, enable_https, validate_certificate, enable_tls_1].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
