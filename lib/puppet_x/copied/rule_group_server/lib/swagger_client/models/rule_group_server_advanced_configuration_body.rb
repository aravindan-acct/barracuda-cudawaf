=begin
#Rule Group Server advanced configuration API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class RuleGroupServerAdvancedConfigurationBody
    # Max Spare Connections
    attr_accessor :max_spare_connections

    # Source IP to Connect
    attr_accessor :source_ip_to_connect

    # Max Requests
    attr_accessor :max_requests

    # Max Establishing Connections
    attr_accessor :max_establishing_connections

    # Max Connections
    attr_accessor :max_connections

    # Timeout
    attr_accessor :timeout

    # Client Impersonation
    attr_accessor :client_impersonation

    # Max Keepalive Requests
    attr_accessor :max_keepalive_requests

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'max_spare_connections' => :'max-spare-connections',
        :'source_ip_to_connect' => :'source-ip-to-connect',
        :'max_requests' => :'max-requests',
        :'max_establishing_connections' => :'max-establishing-connections',
        :'max_connections' => :'max-connections',
        :'timeout' => :'timeout',
        :'client_impersonation' => :'client-impersonation',
        :'max_keepalive_requests' => :'max-keepalive-requests'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'max_spare_connections' => :'Integer',
        :'source_ip_to_connect' => :'String',
        :'max_requests' => :'Integer',
        :'max_establishing_connections' => :'Integer',
        :'max_connections' => :'Integer',
        :'timeout' => :'Integer',
        :'client_impersonation' => :'String',
        :'max_keepalive_requests' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'max-spare-connections')
        self.max_spare_connections = attributes[:'max-spare-connections']
      end

      if attributes.has_key?(:'source-ip-to-connect')
        self.source_ip_to_connect = attributes[:'source-ip-to-connect']
      else
        self.source_ip_to_connect = ""
      end

      if attributes.has_key?(:'max-requests')
        self.max_requests = attributes[:'max-requests']
      end

      if attributes.has_key?(:'max-establishing-connections')
        self.max_establishing_connections = attributes[:'max-establishing-connections']
      end

      if attributes.has_key?(:'max-connections')
        self.max_connections = attributes[:'max-connections']
      end

      if attributes.has_key?(:'timeout')
        self.timeout = attributes[:'timeout']
      end

      if attributes.has_key?(:'client-impersonation')
        self.client_impersonation = attributes[:'client-impersonation']
      else
        self.client_impersonation = "No"
      end

      if attributes.has_key?(:'max-keepalive-requests')
        self.max_keepalive_requests = attributes[:'max-keepalive-requests']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@max_spare_connections.nil? && @max_spare_connections < 0
        invalid_properties.push("invalid value for 'max_spare_connections', must be greater than or equal to 0.")
      end

      if !@max_requests.nil? && @max_requests < 0
        invalid_properties.push("invalid value for 'max_requests', must be greater than or equal to 0.")
      end

      if !@max_establishing_connections.nil? && @max_establishing_connections < 1
        invalid_properties.push("invalid value for 'max_establishing_connections', must be greater than or equal to 1.")
      end

      if !@max_connections.nil? && @max_connections < 0
        invalid_properties.push("invalid value for 'max_connections', must be greater than or equal to 0.")
      end

      if !@timeout.nil? && @timeout < 0
        invalid_properties.push("invalid value for 'timeout', must be greater than or equal to 0.")
      end

      if !@max_keepalive_requests.nil? && @max_keepalive_requests < 0
        invalid_properties.push("invalid value for 'max_keepalive_requests', must be greater than or equal to 0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@max_spare_connections.nil? && @max_spare_connections < 0
      return false if !@max_requests.nil? && @max_requests < 0
      return false if !@max_establishing_connections.nil? && @max_establishing_connections < 1
      return false if !@max_connections.nil? && @max_connections < 0
      return false if !@timeout.nil? && @timeout < 0
      client_impersonation_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless client_impersonation_validator.valid?(@client_impersonation)
      return false if !@max_keepalive_requests.nil? && @max_keepalive_requests < 0
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] max_spare_connections Value to be assigned
    def max_spare_connections=(max_spare_connections)

      if !max_spare_connections.nil? && max_spare_connections < 0
        fail ArgumentError, "invalid value for 'max_spare_connections', must be greater than or equal to 0."
      end

      @max_spare_connections = max_spare_connections
    end

    # Custom attribute writer method with validation
    # @param [Object] max_requests Value to be assigned
    def max_requests=(max_requests)

      if !max_requests.nil? && max_requests < 0
        fail ArgumentError, "invalid value for 'max_requests', must be greater than or equal to 0."
      end

      @max_requests = max_requests
    end

    # Custom attribute writer method with validation
    # @param [Object] max_establishing_connections Value to be assigned
    def max_establishing_connections=(max_establishing_connections)

      if !max_establishing_connections.nil? && max_establishing_connections < 1
        fail ArgumentError, "invalid value for 'max_establishing_connections', must be greater than or equal to 1."
      end

      @max_establishing_connections = max_establishing_connections
    end

    # Custom attribute writer method with validation
    # @param [Object] max_connections Value to be assigned
    def max_connections=(max_connections)

      if !max_connections.nil? && max_connections < 0
        fail ArgumentError, "invalid value for 'max_connections', must be greater than or equal to 0."
      end

      @max_connections = max_connections
    end

    # Custom attribute writer method with validation
    # @param [Object] timeout Value to be assigned
    def timeout=(timeout)

      if !timeout.nil? && timeout < 0
        fail ArgumentError, "invalid value for 'timeout', must be greater than or equal to 0."
      end

      @timeout = timeout
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_impersonation Object to be assigned
    def client_impersonation=(client_impersonation)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(client_impersonation)
        fail ArgumentError, "invalid value for 'client_impersonation', must be one of #{validator.allowable_values}."
      end
      @client_impersonation = client_impersonation
    end

    # Custom attribute writer method with validation
    # @param [Object] max_keepalive_requests Value to be assigned
    def max_keepalive_requests=(max_keepalive_requests)

      if !max_keepalive_requests.nil? && max_keepalive_requests < 0
        fail ArgumentError, "invalid value for 'max_keepalive_requests', must be greater than or equal to 0."
      end

      @max_keepalive_requests = max_keepalive_requests
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          max_spare_connections == o.max_spare_connections &&
          source_ip_to_connect == o.source_ip_to_connect &&
          max_requests == o.max_requests &&
          max_establishing_connections == o.max_establishing_connections &&
          max_connections == o.max_connections &&
          timeout == o.timeout &&
          client_impersonation == o.client_impersonation &&
          max_keepalive_requests == o.max_keepalive_requests
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [max_spare_connections, source_ip_to_connect, max_requests, max_establishing_connections, max_connections, timeout, client_impersonation, max_keepalive_requests].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
