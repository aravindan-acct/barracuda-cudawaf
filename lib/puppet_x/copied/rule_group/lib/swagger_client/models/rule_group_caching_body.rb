=begin
#Rule Group caching API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class RuleGroupCachingBody
    # Status
    attr_accessor :status

    # File Extensions
    attr_accessor :file_extensions

    # Expiry Age (minutes)
    attr_accessor :expiry_age

    # Ignore Response Headers
    attr_accessor :ignore_response_headers

    # Min Size (B)
    attr_accessor :min_size

    # Ignore Request Headers
    attr_accessor :ignore_request_headers

    # Cache Negative Responses
    attr_accessor :cache_negative_responses

    # Max Size (KB)
    attr_accessor :max_size

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'file_extensions' => :'file-extensions',
        :'expiry_age' => :'expiry-age',
        :'ignore_response_headers' => :'ignore-response-headers',
        :'min_size' => :'min-size',
        :'ignore_request_headers' => :'ignore-request-headers',
        :'cache_negative_responses' => :'cache-negative-responses',
        :'max_size' => :'max-size'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'status' => :'String',
        :'file_extensions' => :'String',
        :'expiry_age' => :'Integer',
        :'ignore_response_headers' => :'String',
        :'min_size' => :'Integer',
        :'ignore_request_headers' => :'String',
        :'cache_negative_responses' => :'String',
        :'max_size' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = "Off"
      end

      if attributes.has_key?(:'file-extensions')
        self.file_extensions = attributes[:'file-extensions']
      end

      if attributes.has_key?(:'expiry-age')
        self.expiry_age = attributes[:'expiry-age']
      end

      if attributes.has_key?(:'ignore-response-headers')
        self.ignore_response_headers = attributes[:'ignore-response-headers']
      else
        self.ignore_response_headers = "No"
      end

      if attributes.has_key?(:'min-size')
        self.min_size = attributes[:'min-size']
      end

      if attributes.has_key?(:'ignore-request-headers')
        self.ignore_request_headers = attributes[:'ignore-request-headers']
      else
        self.ignore_request_headers = "No"
      end

      if attributes.has_key?(:'cache-negative-responses')
        self.cache_negative_responses = attributes[:'cache-negative-responses']
      else
        self.cache_negative_responses = "No"
      end

      if attributes.has_key?(:'max-size')
        self.max_size = attributes[:'max-size']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @file_extensions.nil?
        invalid_properties.push("invalid value for 'file_extensions', file_extensions cannot be nil.")
      end

      if !@expiry_age.nil? && @expiry_age < 0
        invalid_properties.push("invalid value for 'expiry_age', must be greater than or equal to 0.")
      end

      if !@min_size.nil? && @min_size < 0
        invalid_properties.push("invalid value for 'min_size', must be greater than or equal to 0.")
      end

      if !@max_size.nil? && @max_size < 0
        invalid_properties.push("invalid value for 'max_size', must be greater than or equal to 0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ["On", "Off"])
      return false unless status_validator.valid?(@status)
      return false if @file_extensions.nil?
      return false if !@expiry_age.nil? && @expiry_age < 0
      ignore_response_headers_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless ignore_response_headers_validator.valid?(@ignore_response_headers)
      return false if !@min_size.nil? && @min_size < 0
      ignore_request_headers_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless ignore_request_headers_validator.valid?(@ignore_request_headers)
      cache_negative_responses_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless cache_negative_responses_validator.valid?(@cache_negative_responses)
      return false if !@max_size.nil? && @max_size < 0
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["On", "Off"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for 'status', must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] expiry_age Value to be assigned
    def expiry_age=(expiry_age)

      if !expiry_age.nil? && expiry_age < 0
        fail ArgumentError, "invalid value for 'expiry_age', must be greater than or equal to 0."
      end

      @expiry_age = expiry_age
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ignore_response_headers Object to be assigned
    def ignore_response_headers=(ignore_response_headers)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(ignore_response_headers)
        fail ArgumentError, "invalid value for 'ignore_response_headers', must be one of #{validator.allowable_values}."
      end
      @ignore_response_headers = ignore_response_headers
    end

    # Custom attribute writer method with validation
    # @param [Object] min_size Value to be assigned
    def min_size=(min_size)

      if !min_size.nil? && min_size < 0
        fail ArgumentError, "invalid value for 'min_size', must be greater than or equal to 0."
      end

      @min_size = min_size
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ignore_request_headers Object to be assigned
    def ignore_request_headers=(ignore_request_headers)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(ignore_request_headers)
        fail ArgumentError, "invalid value for 'ignore_request_headers', must be one of #{validator.allowable_values}."
      end
      @ignore_request_headers = ignore_request_headers
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cache_negative_responses Object to be assigned
    def cache_negative_responses=(cache_negative_responses)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(cache_negative_responses)
        fail ArgumentError, "invalid value for 'cache_negative_responses', must be one of #{validator.allowable_values}."
      end
      @cache_negative_responses = cache_negative_responses
    end

    # Custom attribute writer method with validation
    # @param [Object] max_size Value to be assigned
    def max_size=(max_size)

      if !max_size.nil? && max_size < 0
        fail ArgumentError, "invalid value for 'max_size', must be greater than or equal to 0."
      end

      @max_size = max_size
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          file_extensions == o.file_extensions &&
          expiry_age == o.expiry_age &&
          ignore_response_headers == o.ignore_response_headers &&
          min_size == o.min_size &&
          ignore_request_headers == o.ignore_request_headers &&
          cache_negative_responses == o.cache_negative_responses &&
          max_size == o.max_size
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [status, file_extensions, expiry_age, ignore_response_headers, min_size, ignore_request_headers, cache_negative_responses, max_size].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
