=begin
#Data Theft Protection API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class DataTheftProtectionBody
    # Action
    attr_accessor :action

    # Custom Identity Theft Type
    attr_accessor :custom_identity_theft_type

    # Enabled
    attr_accessor :enable

    # Identity Theft Type
    attr_accessor :identity_theft_type

    # Initial Characters to Keep
    attr_accessor :initial_characters_to_keep

    # Data Theft Element Name
    attr_accessor :name

    # Trailing Characters to Keep
    attr_accessor :trailing_characters_to_keep

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'action' => :'action',
        :'custom_identity_theft_type' => :'custom-identity-theft-type',
        :'enable' => :'enable',
        :'identity_theft_type' => :'identity-theft-type',
        :'initial_characters_to_keep' => :'initial-characters-to-keep',
        :'name' => :'name',
        :'trailing_characters_to_keep' => :'trailing-characters-to-keep'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'action' => :'String',
        :'custom_identity_theft_type' => :'String',
        :'enable' => :'String',
        :'identity_theft_type' => :'String',
        :'initial_characters_to_keep' => :'Integer',
        :'name' => :'String',
        :'trailing_characters_to_keep' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'action')
        self.action = attributes[:'action']
      else
        self.action = "Block"
      end

      if attributes.has_key?(:'custom-identity-theft-type')
        self.custom_identity_theft_type = attributes[:'custom-identity-theft-type']
      end

      if attributes.has_key?(:'enable')
        self.enable = attributes[:'enable']
      else
        self.enable = "Yes"
      end

      if attributes.has_key?(:'identity-theft-type')
        self.identity_theft_type = attributes[:'identity-theft-type']
      else
        self.identity_theft_type = "CUSTOM"
      end

      if attributes.has_key?(:'initial-characters-to-keep')
        self.initial_characters_to_keep = attributes[:'initial-characters-to-keep']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'trailing-characters-to-keep')
        self.trailing_characters_to_keep = attributes[:'trailing-characters-to-keep']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@initial_characters_to_keep.nil? && @initial_characters_to_keep < 0
        invalid_properties.push("invalid value for 'initial_characters_to_keep', must be greater than or equal to 0.")
      end

      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if !@trailing_characters_to_keep.nil? && @trailing_characters_to_keep < 0
        invalid_properties.push("invalid value for 'trailing_characters_to_keep', must be greater than or equal to 0.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      action_validator = EnumAttributeValidator.new('String', ["Block", "Cloak"])
      return false unless action_validator.valid?(@action)
      enable_validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      return false unless enable_validator.valid?(@enable)
      identity_theft_type_validator = EnumAttributeValidator.new('String', ["CUSTOM", "Credit Cards", "Social Security Numbers", "Directory Indexing", "Microsoft Errors", "Oracle Errors", "PHP Errors", "PostgreS Errors", "MySQL Errors"])
      return false unless identity_theft_type_validator.valid?(@identity_theft_type)
      return false if !@initial_characters_to_keep.nil? && @initial_characters_to_keep < 0
      return false if @name.nil?
      return false if !@trailing_characters_to_keep.nil? && @trailing_characters_to_keep < 0
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      validator = EnumAttributeValidator.new('String', ["Block", "Cloak"])
      unless validator.valid?(action)
        fail ArgumentError, "invalid value for 'action', must be one of #{validator.allowable_values}."
      end
      @action = action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enable Object to be assigned
    def enable=(enable)
      validator = EnumAttributeValidator.new('String', ["Yes", "No"])
      unless validator.valid?(enable)
        fail ArgumentError, "invalid value for 'enable', must be one of #{validator.allowable_values}."
      end
      @enable = enable
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] identity_theft_type Object to be assigned
    def identity_theft_type=(identity_theft_type)
      validator = EnumAttributeValidator.new('String', ["CUSTOM", "Credit Cards", "Social Security Numbers", "Directory Indexing", "Microsoft Errors", "Oracle Errors", "PHP Errors", "PostgreS Errors", "MySQL Errors"])
      unless validator.valid?(identity_theft_type)
        fail ArgumentError, "invalid value for 'identity_theft_type', must be one of #{validator.allowable_values}."
      end
      @identity_theft_type = identity_theft_type
    end

    # Custom attribute writer method with validation
    # @param [Object] initial_characters_to_keep Value to be assigned
    def initial_characters_to_keep=(initial_characters_to_keep)

      if !initial_characters_to_keep.nil? && initial_characters_to_keep < 0
        fail ArgumentError, "invalid value for 'initial_characters_to_keep', must be greater than or equal to 0."
      end

      @initial_characters_to_keep = initial_characters_to_keep
    end

    # Custom attribute writer method with validation
    # @param [Object] trailing_characters_to_keep Value to be assigned
    def trailing_characters_to_keep=(trailing_characters_to_keep)

      if !trailing_characters_to_keep.nil? && trailing_characters_to_keep < 0
        fail ArgumentError, "invalid value for 'trailing_characters_to_keep', must be greater than or equal to 0."
      end

      @trailing_characters_to_keep = trailing_characters_to_keep
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          action == o.action &&
          custom_identity_theft_type == o.custom_identity_theft_type &&
          enable == o.enable &&
          identity_theft_type == o.identity_theft_type &&
          initial_characters_to_keep == o.initial_characters_to_keep &&
          name == o.name &&
          trailing_characters_to_keep == o.trailing_characters_to_keep
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [action, custom_identity_theft_type, enable, identity_theft_type, initial_characters_to_keep, name, trailing_characters_to_keep].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
