=begin
#Data Theft Protection API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class DataTheftProtectionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # DELETE Information of Data Theft Protection
    # 
    # @param authorization Login token
    # @param policy_name Policy Name of Data Theft Protection
    # @param data_theft_element_name Data Theft Element Name of Data Theft Protection
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def security_policies_policy_name_protected_data_types_data_theft_element_name_delete(authorization, policy_name, data_theft_element_name, opts = {})
       data, status_code, headers = security_policies_policy_name_protected_data_types_data_theft_element_name_delete_with_http_info(authorization, policy_name, data_theft_element_name, opts)
      return data, status_code, headers
    end

    # DELETE Information of Data Theft Protection
    # 
    # @param authorization Login token
    # @param policy_name Policy Name of Data Theft Protection
    # @param data_theft_element_name Data Theft Element Name of Data Theft Protection
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def security_policies_policy_name_protected_data_types_data_theft_element_name_delete_with_http_info(authorization, policy_name, data_theft_element_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_delete ..."
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_delete"
      end
      # verify the required parameter 'policy_name' is set
      if @api_client.config.client_side_validation && policy_name.nil?
        fail ArgumentError, "Missing the required parameter 'policy_name' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_delete"
      end
      # verify the required parameter 'data_theft_element_name' is set
      if @api_client.config.client_side_validation && data_theft_element_name.nil?
        fail ArgumentError, "Missing the required parameter 'data_theft_element_name' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_delete"
      end
      # resource path
      local_var_path = "/security-policies/{Policy Name}/protected-data-types/{Data Theft Element Name}".sub('{' + 'Policy Name' + '}', policy_name.to_s).sub('{' + 'Data Theft Element Name' + '}', data_theft_element_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataTheftProtectionApi#security_policies_policy_name_protected_data_types_data_theft_element_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # FETCH Information of Data Theft Protection
    # 
    # @param authorization Login token
    # @param policy_name Policy Name of Data Theft Protection
    # @param data_theft_element_name Data Theft Element Name of Data Theft Protection
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields 
    # @return [nil]
    def security_policies_policy_name_protected_data_types_data_theft_element_name_get(authorization, policy_name, data_theft_element_name, opts = {})
       data, status_code, headers = security_policies_policy_name_protected_data_types_data_theft_element_name_get_with_http_info(authorization, policy_name, data_theft_element_name, opts)
      return data, status_code, headers
    end

    # FETCH Information of Data Theft Protection
    # 
    # @param authorization Login token
    # @param policy_name Policy Name of Data Theft Protection
    # @param data_theft_element_name Data Theft Element Name of Data Theft Protection
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def security_policies_policy_name_protected_data_types_data_theft_element_name_get_with_http_info(authorization, policy_name, data_theft_element_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_get ..."
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_get"
      end
      # verify the required parameter 'policy_name' is set
      if @api_client.config.client_side_validation && policy_name.nil?
        fail ArgumentError, "Missing the required parameter 'policy_name' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_get"
      end
      # verify the required parameter 'data_theft_element_name' is set
      if @api_client.config.client_side_validation && data_theft_element_name.nil?
        fail ArgumentError, "Missing the required parameter 'data_theft_element_name' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_get"
      end
      # resource path
      local_var_path = "/security-policies/{Policy Name}/protected-data-types/{Data Theft Element Name}".sub('{' + 'Policy Name' + '}', policy_name.to_s).sub('{' + 'Data Theft Element Name' + '}', data_theft_element_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :multi) if !opts[:'fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataTheftProtectionApi#security_policies_policy_name_protected_data_types_data_theft_element_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # EDIT Information of Data Theft Protection
    # 
    # @param authorization Login token
    # @param policy_name Policy Name of Data Theft Protection
    # @param data_theft_element_name Data Theft Element Name of Data Theft Protection
    # @param data_theft_protection Body Parameter of Data Theft Protection
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def security_policies_policy_name_protected_data_types_data_theft_element_name_put(authorization, policy_name, data_theft_element_name, data_theft_protection, opts = {})
       data, status_code, headers = security_policies_policy_name_protected_data_types_data_theft_element_name_put_with_http_info(authorization, policy_name, data_theft_element_name, data_theft_protection, opts)
      return data, status_code, headers
    end

    # EDIT Information of Data Theft Protection
    # 
    # @param authorization Login token
    # @param policy_name Policy Name of Data Theft Protection
    # @param data_theft_element_name Data Theft Element Name of Data Theft Protection
    # @param data_theft_protection Body Parameter of Data Theft Protection
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def security_policies_policy_name_protected_data_types_data_theft_element_name_put_with_http_info(authorization, policy_name, data_theft_element_name, data_theft_protection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_put ..."
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_put"
      end
      # verify the required parameter 'policy_name' is set
      if @api_client.config.client_side_validation && policy_name.nil?
        fail ArgumentError, "Missing the required parameter 'policy_name' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_put"
      end
      # verify the required parameter 'data_theft_element_name' is set
      if @api_client.config.client_side_validation && data_theft_element_name.nil?
        fail ArgumentError, "Missing the required parameter 'data_theft_element_name' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_put"
      end
      # verify the required parameter 'data_theft_protection' is set
      if @api_client.config.client_side_validation && data_theft_protection.nil?
        fail ArgumentError, "Missing the required parameter 'data_theft_protection' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_data_theft_element_name_put"
      end
      # resource path
      local_var_path = "/security-policies/{Policy Name}/protected-data-types/{Data Theft Element Name}".sub('{' + 'Policy Name' + '}', policy_name.to_s).sub('{' + 'Data Theft Element Name' + '}', data_theft_element_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(data_theft_protection)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataTheftProtectionApi#security_policies_policy_name_protected_data_types_data_theft_element_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # FETCH Information of Data Theft Protection
    # 
    # @param authorization Login token
    # @param policy_name Policy Name of Data Theft Protection
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields 
    # @return [nil]
    def security_policies_policy_name_protected_data_types_get(authorization, policy_name, opts = {})
       data, status_code, headers = security_policies_policy_name_protected_data_types_get_with_http_info(authorization, policy_name, opts)
      return data, status_code, headers
    end

    # FETCH Information of Data Theft Protection
    # 
    # @param authorization Login token
    # @param policy_name Policy Name of Data Theft Protection
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :fields 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def security_policies_policy_name_protected_data_types_get_with_http_info(authorization, policy_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataTheftProtectionApi.security_policies_policy_name_protected_data_types_get ..."
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_get"
      end
      # verify the required parameter 'policy_name' is set
      if @api_client.config.client_side_validation && policy_name.nil?
        fail ArgumentError, "Missing the required parameter 'policy_name' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_get"
      end
      # resource path
      local_var_path = "/security-policies/{Policy Name}/protected-data-types".sub('{' + 'Policy Name' + '}', policy_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :multi) if !opts[:'fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataTheftProtectionApi#security_policies_policy_name_protected_data_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ADD Information of Data Theft Protection
    # 
    # @param authorization Login token
    # @param policy_name Policy Name of Data Theft Protection
    # @param data_theft_protection Body Parameter of Data Theft Protection
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def security_policies_policy_name_protected_data_types_post(authorization, policy_name, data_theft_protection, opts = {})
       data, status_code, headers = security_policies_policy_name_protected_data_types_post_with_http_info(authorization, policy_name, data_theft_protection, opts)
      return data, status_code, headers
    end

    # ADD Information of Data Theft Protection
    # 
    # @param authorization Login token
    # @param policy_name Policy Name of Data Theft Protection
    # @param data_theft_protection Body Parameter of Data Theft Protection
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def security_policies_policy_name_protected_data_types_post_with_http_info(authorization, policy_name, data_theft_protection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DataTheftProtectionApi.security_policies_policy_name_protected_data_types_post ..."
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_post"
      end
      # verify the required parameter 'policy_name' is set
      if @api_client.config.client_side_validation && policy_name.nil?
        fail ArgumentError, "Missing the required parameter 'policy_name' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_post"
      end
      # verify the required parameter 'data_theft_protection' is set
      if @api_client.config.client_side_validation && data_theft_protection.nil?
        fail ArgumentError, "Missing the required parameter 'data_theft_protection' when calling DataTheftProtectionApi.security_policies_policy_name_protected_data_types_post"
      end
      # resource path
      local_var_path = "/security-policies/{Policy Name}/protected-data-types".sub('{' + 'Policy Name' + '}', policy_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(data_theft_protection)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataTheftProtectionApi#security_policies_policy_name_protected_data_types_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
